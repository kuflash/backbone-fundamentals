{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Backbone-fundamentals","tagline":"A creative-commons book on Backbone.js for beginners and advanced users alike","google":"UA-36385382-1","body":"﻿#Разработка Backbone.js Приложений\r\nЭто книга о Backbone.js предназначена для новичков и опытных пользователей.\r\n\r\n[Главная ветка](https://github.com/addyosmani/backbone-fundamentals) книги 'Developing Backbone.js Applications', которая описывает работу с Backbone.js-фреймворком, предназначенным для структурирования JavaScript-приложений. Выпущена под лицензией [CC](http://creativecommons.org/licenses/by-nc-sa/3.0/).\r\n\r\n<i>(Данный форк является переводом на русский язык. Ввиду отсутствия других переводов, можно считать этот перевод официальным - Прим. Переводчика)</i>\r\n\r\nЯ очень рад, что эта книга через несколько месяцев будет напечатана на бумаге под редакцией [O'Reilly Media](http://oreilly.com). Читатели смогут приобрести последнюю версию книги в печатном формате либо в различных цифровых форматах. Или скачать ее из этого репозитория бесплатно.\r\n\r\nКорректировки этого материала всегда приветствуются, и я надеюсь, что вместе мы обеспечим сообщество актуальным на сегодняшний день вспомогательным материалом.\r\n\r\nБольше благодарностей [этим](https://github.com/addyosmani/backbone-fundamentals/contributors) членам сообщества за их помощь в доводке этого проекта.\r\n\r\n##Содержание\r\n\r\n* [Введение](#introduction)\r\n\r\n* ####[Теория](#fundamentals)\r\n    * [Понимание MVC & MVP](#mvc-mvp)\r\n\r\n* ####[Основы](#thebasics)\r\n    * [Модели](#models)\r\n    * [Представления](#views)\r\n    * [Коллекции](#collections)\r\n    * [Маршрутизаторы](#routers)\r\n    * [Пространства имен](#namespacing)\r\n    * [Дополнительные советы](#additional-tips)\r\n\r\n* ####[ Расширенная часть](#advanced)\r\n    * [Создание RESTful приложений с Backbone](#restful)\r\n    * [Набор 1: Используем Node.js, Express, Mongoose и MongoDB](#stack1)\r\n    * [Модульный JavaScript](#modularjs)\r\n    * Organizing modules with RequireJS and AMD\r\n    * Keeping your templates external with the RequireJS text plugin\r\n    * Optimizing Backbone apps for production with the RequireJS Optimizer\r\n    * Practical: Building a modular Backbone app with AMD & RequireJS\r\n    * Decoupling Backbone with the Mediator and Facade patterns \r\n    * Backbone & jQuery Mobile\r\n    * Practical: Building a modular mobile app with Backbone & jQuery Mobile\r\n\r\n* ####[Testing](#testing)\r\n    * Unit Testing Backbone Applications With Jasmine\r\n    * An Introduction to Jasmine\r\n    * [Testing Models](#testing-models)\r\n    * [Testing Collections](#testing-collections)\r\n    * [Testing Views](#testing-views)\r\n\r\n\r\n* ####[Resources](#resources)\r\n\r\n\r\n##<a name=\"introduction\">Введение</a>\r\n\r\nКак JavaScript-разработчики, мы живем в интересное время, когда не только у нас имеются зрелые решения, помогающие организовать и усилить JavaScript-приложения, базирующиеся на разделении задач. Программисты, работающие над нетривиальными проектами, имеют возможность выбора фреймворка, который поможет им структурировать их приложения.\r\n\r\nЗрелость программного обеспечения (фреймворка в частности) заключается не просто в том, на сколько давно этот фреймворк существует, а в том, на сколько этот фреймворк надежен и, что более важно, как хорошо он развивался, чтобы выполнить свою роль. Стал ли он более эффективным при решении общих проблем? Продолжает ли он помогать разработчикам создавать более крупные и сложные приложения?\r\n\r\nВ этой книге я расскажу о популярном фреймворке Backbone.js, который я считаю лучшим из существующего семейства архитектурных JavaScript-фреймворков.\r\n\r\nТемы будут включать в себя MVC теорию, а так же принципы построения приложений с использованием моделей, представлений, коллекций и маршрутизаторов из Backbone. Я также проведу вас по сложным темам, таким как: модульная разработка с использованием Backbone.js и AMD (RequireJS), построение приложений с использованием современного программного стека(Node.js  и Express), разрешение проблем маршрутизации Backbone и jQuery Mobile, советы по инструментам скафолдинга и многое другое.\r\n\r\nЕсли вы узнали о Backbone.js впервые и все еще сомневаетесь, пробовать его или нет, то почему бы не взглянуть на то, как [Todo приложение](http://github.com/addyosmani/todomvc) может быть реализовано с помощью Backbone и других популярных фреймворков, прежде, чем читать дальше?\r\n\r\nЦель этой книги - создать авторитетное и централизованное хранилище информации, которая может помочь в создании реальных проектов с помощью Backbone. Если вы считаете, что какой-то раздел или тему можно улучшить и расширить то, пожалуйста, не стесняйтесь и выдвигайте предложения. Это не долго и в тоже время поможет другим разработчикам избежать проблем, с которыми вы столкнулись раньше их.\r\n\r\n\r\n##<a name=\"fundamentals\">Теория</a>\r\n\r\nВ этом разделе мы попробуем разобрать общие принципы, по которым работает Backbone.js. Давайте начнем наше путешествие в лучшее понимание Backbone с осмотра общей архитектуры кода.\r\n\r\n\r\n###<a name=\"mvc-mvp\">Понимание MVC & MVP (Для JavaScript-разработчиков)</a>\r\n\r\nПеред началом изучения любого JavaScript-фреймворка, который предназначен для структурирования приложений, полезным будет получение базовых знаний о шаблонах архитектурного проектирования. Шаблон проектирования - это проверенное решение общих проблем разработки, способное предложить разработчикам структурные подходы при организации их приложений.\r\n\r\nШаблоны полезны, поскольку являются набором практик, которые основываются на коллективном опыте квалифицированных разработчиков, решавших подобные проблемы не один раз. И хотя разработчики 10 или 20 лет назад не использовали теже программные языки при реализации шаблонов проектирования в своих проектах, из их усилий мы можем почерпнуть для себя очень много уроков.\r\n\r\nВ этом разделе мы собираемся рассмотреть два популярных шаблона проектирования - MVC и MVP. Далее в этой книге мы изучим более подробно, как Backbone реализует эти паттерны.\r\n\r\n\r\n##MVC\r\n\r\nMVC (Model-View-Controller) - это шаблон архитектурного проектирования, который способствует более совершенной организации приложения через разделение ответственности между компонентами. Шаблон обеспечивает отделение бизнес-логики (Модель) от пользовательского интерфейса (Представление) с использованием третьего компонента (Контроллер), который традиционно представляет собой управление логикой пользовательских действий, координирования моделей и представлений. Первоначально шаблон был разработан [Трюгве Реенскаугом](http://en.wikipedia.org/wiki/Trygve_Reenskaug), работавшим над языком программирования Smalltalk-80 (1979). Тогда шаблон был изначально назван Model-View-Controller-Editor. MVC был подробно описан в [“Шаблоны проектирования: Элементы повторно используемого объектно-ориентированного ПО”](http://www.amazon.co.uk/Design-patterns-elements-reusable-object-oriented/dp/0201633612) (Часто называемой \"GoF\" или “Gang of Four”) в 1994 году, что сыграло свою роль в популяризации его использования.\r\n\r\n\r\n###MVC в Smalltalk-80\r\n\r\nВажно понять, какие проблемы стремился решить оригинальный шаблон MVC и на сколько сильно он изменился с момента его возникновения. В 70-х годах до графического пользовательского интерфейса было еще далеко. Подход, известный как [Раздельные презентации](http://martinfowler.com/eaaDev/uiArchs.html) стал использоваться, как средство прозрачного разделения объектных областей, которые моделируют сущности в реальном мире (например, изображение, человек и др.), и презентационные объекты, которые визуализируются на экран пользователя. <i>(Этот абзац возможно переведен криво - Прим.Пер.)</i>\r\n\r\nРеализация MVC в Smalltalk-80 не остановилась на этой концепции и пошла дальше: была поставлена цель выделения логики приложения из пользовательского интерфейса. Идея заключалась в том, что разделение этих частей приложения позволит повторно использовать модели для других элементов интерфейса. Есть несколько интересных моментов, которые стоит отметить в архитектуре MVC из Smalltalk-80:\r\n\r\n* Элемент Домена, известный как Модель, ничего не знал о пользовательском интерфейсе (Представления и Контроллеры)\r\n* Презентация заботилась о Представлениях и Контроллерах, однако не являлась единым представлением и контроллером. Пара Представление-Контроллер была необходима для каждого отображаемого элемента на экране, поэтому между ними не было истинного разделения\r\n* Ролью Контроллера в этой паре была обработка пользовательского ввода (например, нажатие клавиши или событие нажатия клика) и последующее какое-либо разумное действие.\r\n* Шаблон \"Наблюдатель\" основывался на обновлении Представления всякий раз, как изменялась Модель.\r\n\r\nРазработчики иногда удивляются, узнав, что шаблон \"Наблюдатель\" (в настоящее время известный как система Издатель-Подписчик) был включен в MVC-архитектуру десятилетия назад. В MVC языка Smalltalk-80 Представление и Контроллер оба наблюдали за Моделью: каждый раз, когда изменялась Модель, Представление на это реагировало. Простой пример такой реализации лежит в основе программ для фондового рынка - для отображения информации в реальном времени любое изменение данных в Модели приложения должно приводить к моментальному обновлению Представления.\r\n\r\nМартин Фаулер провел отличную работу по описанию [оригинального](http://martinfowler.com/eaaDev/uiArchs.html) шаблона MVC на протяжении многих лет. И если вы заинтересованы в дальнейшем изучении истории MVC в Smalltalk-80, я рекомендую почитать его работу.\r\n\r\n\r\n##MVC как мы его знаем\r\n\r\nМы рассмотрели 70-е года, однако давайте вернемся в нынешнее время. Шаблон MVC был применен в широком спектре языков программирования. Для примера, популярный Ruby on Rails - это реализация фреймворка, основанного на MVC, для создания веб-приложений с помощью языка Rails. JavaScript на данный момент имеет ряд MVC-фреймворков, таких как Ember.js, JavaScriptMVC, и конечно же Backbone.js. Учитывая важность избегания спагетти-кода (термин, характеризующий код, который очень сложно воспринимаем для чтения и трудно поддерживаем из-за отсутствия структуры) давайте посмотрим, что позволяют делать JavaScript-разработчику MVC шаблоны.\r\n\r\nMVC состоит из трех основных компонентов:\r\n\r\n###Модели\r\n\r\nМодели управляют данными приложения. Они не беспокоятся ни о пользовательском интерфейсе, ни о слоях представлений, но предоставляют структурированные данные, которые могут потребоваться приложению. Когда изменяется модель (например, при ее обновлении), она как правило уведомляет своих наблюдателей (например, Представления - о концепции мы расскажем чуть позже), что произошло изменение, на которое они могут отреагировать.\r\n  \r\nЧтобы понять модели лучше, давайте представим, что у нас есть JavaScript-приложение: фото-галерея. В фото-галерее фотографии необходима собственная модель, поскольку она представляет собой уникальный вид предметно-ориентированных данных. Модель фотографии может содержать атрибуты, такие как заголовок, источник изображения и другие мета-данные. Конкретные фотографии будут храниться в экземплярах модели. Вот пример простой модели фотографии с использованием Backbone.js:\r\n\r\n```javascript\r\nvar Photo = Backbone.Model.extend({\r\n\r\n    // Атрибуты по умолчанию для фотографии\r\n    defaults: {\r\n      src: \"placeholder.jpg\",\r\n      caption: \"A default image\",\r\n      viewed: false\r\n    },\r\n\r\n    // Убедитесь, что каждая фотография имеет заданный путь 'src'\r\n    initialize: function() {\r\n       this.set({\"src\": this.defaults.src});\r\n    }\r\n\r\n});\r\n```\r\n\r\nВстроенные возможности модели варьируются в зависимости от фреймворка, однако поддержка валидации атрибутов, где атрибуты представляют свойства модели (например, идентификатор модели), является для них общим признаком. При использовании модели в реальном приложении мы, как правило, нуждаемся в сохраняющихся моделях. Сохраняющееся состояние позволяет нам редактировать и обновлять модель, с уверенностью, что модель будет где-либо сохранена, например, в localStorage браузера или синхронизирована с базой сервера.\r\n\r\nМодель может так же иметь несколько Представлений-наблюдателей. Представьте нашу модель Фотографии, которая содержит мета-данные о широте и долготе, где она была сделана, список людей, которые отображены на фотографии и список тегов. Разработчик может создать отдельное Представление, которое содержит все эти атрибуты, либо три отдельных Представления выводящих каждый из атрибутов отдельно. Важная деталь в том, что модель Фотографии не волнует, как организованы Представления, она просто оповещает об обновлении ее данных по мере необходимости. Мы вернемся к Представлениям более подробно позже.\r\n\r\nДля современных MVC/MV* фреймворков не является редкостью предоставление возможности группировки моделей вместе. В Backbone такие группы называются \"Коллекции\". Управление моделями в группах позволяет нам писать такую логику приложения, которая основывается на уведомлении изменения моделей из группы. Это позволяет избежать наблюдения вручную за каждым экземпляром модели.\r\n\r\nВот так мы могли бы группировать модели фотографий в упрощенной Коллекции Backbone:\r\n\r\n```javascript\r\nvar PhotoGallery = Backbone.Collection.extend({\r\n\r\n    // Ссылка на модели этой коллекции\r\n    model: Photo,\r\n\r\n    // Фильтр по списку всех фотографий, которые были просмотрены\r\n    viewed: function() {\r\n      return this.filter(function(photo){ return photo.get('viewed'); });\r\n    },\r\n\r\n    // Фильтр только по списку фотографии, которые еще не просматривались\r\n    unviewed: function() {\r\n      return this.without.apply(this, this.viewed());\r\n    }\r\n\r\n});\r\n```\r\n\r\nЕсли вы читали старые тексты об MVC, то вы могли столкнуться в описании модели с применением такого способа управления как \"состояние\". В JavaScript применение \"состояния\" имеет особое значение, типично относящееся к \"состоянию\" Представления или Под-представления на экране пользователя в определенное время. Состояние является темой, регулярно поднимаемой при обсуждении одностраничных приложений, в которых концепция состояний должна быть смоделирована.\r\n\r\n\r\n###Представления\r\n\r\nПредставления - это визуальные образы моделей, которые выводят фильтрованное отображение их текущего состояния. Представление обычно наблюдает за моделью и уведомлениями об изменениях модели, соответственно позволяющими представлению обновить себя. В литературе о конструировании шаблонов обычно характеризуют представления, как \"тупиц\", учитывая их ограниченное знание о моделях и контроллерах в приложении.\r\n\r\nПользовательское взаимодействие с представлениями обычно означает чтение и редактирование данных модели. Например, в нашем примере фото-галереи, представление модели фотографии может происходить посредством большого изображения, заголовка и списка тегов. Редактирование модели может быть произведено через \"редактирование\" представления, в котором пользователь изменил заголовок, теги или другие мета-данные для выбранной фотографии.\r\n\r\nВ MVC задача актуального обновления Модели падает на Контроллеры, о которых мы расскажем в ближайшее время.\r\n\r\nДавайте чуть дальше рассмотрим Представления на небольшом простом JavaScript-примере. Ниже мы можем видеть, как функция создает Представление для фотографии, взаимодействуя с экземплярами модели и контроллера.\r\n \r\nОпределим вспомогательную функцию ```render()``` внутри нашего представления для отображения данных из модели ```photoModel```, используя JavaScript движок шаблонизации (Underscore templating) и обновляя данные нашего представления, ссылаясь на ```photoEl```. \r\n\r\nЗатем добавляем в ```photoModel``` нашу функцию обратного вызова(колбэк) ```render()``` в качестве подписчика, так что с помощью модели \"Наблюдатель\" представление теперь может реагировать на изменения модели и обновляться.\r\n\r\nВы можете задаться вопросом, а где же здесь вступает в игру взаимодействие с пользователем. Однако не в ответственности представления решать, что делать дальше при клике пользователя на любом его элементе. Это решение принимает Контроллер. В нашем примере реализации это достигается с помощью добавления слушателя события для ```photoEl```, который будет делегировать управление поведением при нажатии контроллеру, передавая информацию о модели, в случае необходимости.\r\n\r\nПреимуществом такой архитектуры является разделение роли каждого из компонентов при обеспечении необходимого функционирования приложении.\r\n  \r\n```javascript\r\nvar buildPhotoView = function( photoModel, photoController ){\r\n    \r\n    var base        = document.createElement('div'),\r\n        photoEl     = document.createElement('div');\r\n     \r\n     base.appendChild(photoEl);\r\n\r\n     var render= function(){\r\n        // Мы используем библиотеку шаблонизации, такую как Underscore\r\n        // шаблонизатор, который генерирует HTML для нашей\r\n        // записи фотографии\r\n        photoEl.innerHTML = _.template('photoTemplate', {src: photoModel.getSrc()});\r\n     }\r\n\r\n     photoModel.addSubscriber( render );\r\n\r\n     photoEl.addEventListener('click', function(){\r\n        photoController.handleEvent('click', photoModel );\r\n     });\r\n\r\n     var show = function(){\r\n        photoEl.style.display  = '';\r\n     }\r\n\r\n     var hide = function(){\r\n        photoEl.style.display  = 'none';\r\n     }\r\n\r\n\r\n     return{\r\n        showView: show,\r\n        hideView: hide\r\n     }\r\n\r\n}\r\n```\r\n\r\n\r\n**Шаблонизация**\r\n\r\nВ контексте JavaScript-фреймворков, которые поддерживают MVC/MV*, стоит обратить более пристальное внимание на JavaScript шаблонизацию и ее отношении к Представлениям.\r\n\r\nУже давно считается дурным тоном (и чрезмерной вычислительной нагрузкой) создание больших блоков HTML разметки вручную в памяти через склеивание строковых данных. Разработчики, использующие такую технику часто вынуждены пропускать свои данные через циклы, оборачивать их в дополнительные div'ы и использовать устаревшую технику для вставки \"шаблонов\" в DOM, такую как ```document.write```. Такой подход означает совмещение сценариев с обычной разметкой в общем коде, что быстро превращает сценарии в трудно читаемые и трудно поддерживаемые, особенно при создании больших приложений.\r\n    \r\nБиблиотеки JavaScript шаблонизаторов (такие как Handlebars.js или Mustache.js) часто используются для определения шаблонов HTML разметки в представлениях в виде переменных. Эти блоки шаблонов могут храниться как вне скрипта, так и в самом скрипте в виде специального типа данных (например, \"text/template\"). Переменные указываются с помощью специального синтаксиса (например, {{name}}). Библиотеки JavaScript шаболнизации как правило принимают данные в JSON формате, а уже черновую работу по заполнению шаблона данными выполняет сам шаблонный фреймворк. Такой подход имеет ряд преимуществ, особенно когда отдается предпочтение внешнему хранению шаблонов, поскольку это позволяет загружать их динамически по мере необходимости.\r\n\r\nДавайте сравним два примера HTML шаблонов. Один из них использует популярную библиотеку Handlebars.js, в то время как второй реализован с использованием библиотеки \"микро-шаблонов\" Underscore.js.\r\n\r\n**Handlebars.js:**\r\n\r\n```html\r\n<li class=\"photo\">\r\n  <h2>{{caption}}</h2>\r\n  <img class=\"source\" src=\"{{src}}\"/>\r\n  <div class=\"meta-data\"> \r\n    {{metadata}}\r\n  </div>\r\n</li>\r\n```\r\n\r\n**Underscore.js микро-шаблоны:**\r\n\r\n```html\r\n<li class=\"photo\">\r\n  <h2><%= caption %></h2>\r\n  <img class=\"source\" src=\"<%= src %>\"/>\r\n  <div class=\"meta-data\"> \r\n    <%= metadata %>\r\n  </div>\r\n</li>\r\n```\r\n\r\nВ Микро-шаблонах вы можете также использовать и двойные фигурные скобки (то есть ```{{}}```) (или любой другой способ обозначения переменных в шаблонах, который представляется вам наиболее комфортным). В случае с фигурными скобками, нужно всего навсего указать в настройках Underscore атрибут ```templateSettings``` следующим образом:\r\n\r\n```javascript\r\n_.templateSettings = { interpolate : /\\{\\{(.+?)\\}\\}/g };\r\n```\r\n\r\n**Заметка о навигации и состояниях**\r\n\r\nСтоит также отметить, что в классической веб-разработке навигация между независимыми представлениями требует перезагрузки страницы. В одностраничных JavaScript приложениях загрузив единожды данные с сервера посредством Ajax, они могут динамически визуализироваться в новом представлении на той же странице. Так как это не приводит к обновлению URL, то роль навигации, что логично, выполняет \"маршрутизатор\", который помогает управлять состояниями приложения (например позволяет пользователям добавлять в закладки страницу с конкретным представлением, к которому они перешли). Маршрутизаторы, тем не менее, не присутствуют в каждом MVC-фреймворке. Я не буду останавливаться на них подробно в этом разделе.\r\n\r\n\r\n###Контроллеры\r\n\r\nКонтроллеры являются посредниками между моделями и представлениями, которые классически выполняют две задачи: они одинаково обновляют представление, когда изменяется модель, и модель, когда пользователь манипулирует представлением.\r\n   \r\nВ нашем приложении фото-галереи контроллер будет отвечать за обработку изменений, которые пользователь совершает в представлении над конкретной фотографией, и обновлять модель фотографии, когда пользователь заканчивает редактирование.\r\n\r\nИменно в контроллерах большинство JavaScript MVC фреймворков отходят от основной интерпретации MVC шаблонов. Причины тому разные, но, на мой взгляд, авторы JavaScript фреймворков вероятно сначала взглянули на серверную интерпретацию MVC (например как в Ruby on Rails) и поняли, что не смогут реализовать такой подход один к одному на стороне клиента и пере-интерпретировали роль контроллеров в MVC для решения его проблем с управлением статусов. Они подошли к этому с умом, однако тем самым, возможно, осложнили для разработчиков, которые только начинают вникать в MVC, понимание концепции шаблонов MVC для фреймворков на других языках программирования.\r\n\r\nТак есть ли в backbone.js Контроллеры? не совсем. Представления в Backbone как правило содержат в себе логику \"контроллеров\", в тоже время маршрутизаторы (о них ниже) используются для управления статусами приложения, но они не являются Контроллерами в классическом понимании MVC.\r\n\r\nВ связи с этим, не смотря на указанное в официальной документации или в записях блога, Backbone не является ни MVC/MVP, ни MVVM фреймворком. Лучше всего воспринимать его членом семейства MV* фреймворков, которые приближаются к изначальной архитектуре по-своему. В этом, конечно же, нет ничего плохого, но важно понимать различия между классическим MVC и MV* когда вы вступаете в обсуждение  ваших backbone проектов и затрагиваете тему MVC.\r\n\r\n\r\n###Сравнение контроллеров в Spine.js и Backbone.js\r\n\r\n\r\n**Spine.js**\r\n\r\nМы уже знаем, что контроллеры традиционно обновляют представления, когда в моделях происходят изменения и аналогично воздействуют на модель, когда пользователь манипулирует представлением. Мы так же выяснили, что Backbone не имеет **собственного** явного контроллера, поэтому полезно будет взглянуть на контроллеры в других MVC фреймворках, чтобы сравнить реализации. Давайте посмотрим на [Spine.js](http://spinejs.com/):\r\n  \r\nВ этом примере мы создадим контроллер ```PhotosController```, который будет отвечать за изменения отдельных фотографий в приложении. Это будет гарантированно означать, что при обновлении представления (например, пользователь редактирует мета-данные фотографии) соответствующая модель будет делать тоже самое.\r\n\r\n(Примечание: Мы не будем сильно углубляться в Spine.js помимо этого примера, но на него стоит взглянуть для большего понимания работы Javascript фреймворков в целом.)\r\n\r\n\r\n```javascript\r\n// Контроллеры в Spine создаются путем наследования от Spine.Controller\r\n\r\nvar PhotosController = Spine.Controller.sub({      \r\n  init: function(){\r\n    this.item.bind(\"update\", this.proxy(this.render));\r\n    this.item.bind(\"destroy\", this.proxy(this.remove));\r\n  },\r\n\r\n  render: function(){\r\n    // Обработка шаблонов\r\n    this.replace($(\"#photoTemplate\").tmpl(this.item));\r\n    return this;\r\n  },\r\n\r\n  remove: function(){\r\n    this.el.remove();\r\n    this.release();\r\n  }\r\n});\r\n```\r\n\r\nВ Spine контроллеры считаются клеем всего приложения: добавляя реакции на события DOM, отрисовывая шаблоны и обеспечивая синхронизацию моделей и представлений (что соответствует тому, что мы узнали о контроллерах в шаблоне MVC).\r\n\r\nВот, что мы делаем в приведенном выше примере: назначаем слушателей для событий ```update``` и ```destroy``` в виде функций ```render()``` и ```remove()``` соответственно. Когда запись фотографии обновляется, мы перерисовываем представление, чтобы отразить в нем изменения мета-данных. Аналогично: если фотография будет удалена из галереи, то она должна будет пропасть и в представлении. В случае, если вы задаётесь вопросом о функции ```tmpl()``` в отрывке кода: в функции ```render()``` мы используем её для преобразования JavaScript шаблона с именем #photoTemplate, она просто возвращает HTML строку, заменяющую текущий элемент контроллера.\r\n\r\nВсё это даёт нам очень простой и легкий способ управления изменениями между моделью и представлением.\r\n\r\n\r\n**Backbone.js**\r\n\r\nПозже в этом разделе мы рассмотрим различия между Backbone и традиционным MVC, но пока что давайте сфокусируемся на контроллерах.\r\n\r\nВ Backbone логика контроллера распределяется между Backbone.View и Backbone.Router. В ранних релизах Backbone содержался и так называемый и Backbone.Controller, но его переименовали в маршрутизатор, чтобы прояснить его роль.\r\n\r\nОсновная роль Маршрутизаторов - это перевод URL-запросов в статусы приложения. Когда пользователь переходит по ссылке www.example.com/photos/42, Маршрутизатор используется, чтобы показать фотографию с таким ID, и определяет, как себя должно повести приложение в ответ на этот запрос. Маршрутизатор *может* содержать и традиционные функции контроллера, такие как привязка событий между моделями и представлениями или визуализация отдельных участков страницы. Тем не менее, соучастник проекта Backbone Tim Branyen указал на то, что все это можно реализовывать и без Backbone.Router, поэтому вероятный пример использования контроллера выглядит так:\r\n\r\n\r\n```javascript\r\nvar PhotoRouter = Backbone.Router.extend({\r\n  routes: { \"photos/:id\": \"route\" },\r\n\r\n  route: function(id) {\r\n    var item = photoCollection.get(id);\r\n    var view = new PhotoView({ model: item });\r\n\r\n    something.html( view.render().el );\r\n  }\r\n}):\r\n```\r\n\r\n##Что MVC даст нам?\r\n\r\nИтак, разделение задач в MVC обеспечивает модульность функциональности приложения и включает:\r\n\r\n* Облегчение поддержки кода. Когда должны быть произведены обновления в приложении, это можно сделать прозрачно, делаются ли изменения, ориентированные на данные (то есть изменения в моделях и, возможно, контроллерах) или просто визуальные правки (то есть изменения в представлениях).\r\n* Разделение модели и представления означает прямой путь к написанию unit-тестов для бизнес-логики.\r\n* Устраняется дублирование кода моделей и контроллеров в приложении.\r\n* В зависимости от размера приложения и разделения ролей, такая модульность позволяет разработчикам, занимающимся написанием ядра и разработчикам, работающим над пользовательским интерфейсом, работать одновременно.\r\n\r\n\r\n###Углубляясь\r\n\r\nПрямо сейчас, вы, скорее всего, уже имеете базовое понимание схемы MVC, однако дальше мы рассмотрим более любопытные моменты.\r\n\r\nGoF (Gang of Four) не относятся к MVC, как к шаблону проектирования, а считают это \"набором классов для создания пользовательского интерфейса\". По их мнению, это вариация из трех других классических шаблонов проектирования: [Наблюдатель](http://ru.wikipedia.org/wiki/Наблюдатель_(шаблон_проектирования\\)) (Пуб./Подп.), [Стратегия](http://ru.wikipedia.org/wiki/Стратегия_(шаблон_проектирования\\)) и [Компоновщик](http://ru.wikipedia.org/wiki/Компоновщик_(шаблон_проектирования\\)). В зависимости от того, как был спроектирован MVC в фреймворке, он также может иметь [Фабричный метод](http://ru.wikipedia.org/wiki/Фабричный_метод_(шаблон_проектирования\\)) и [Декораторы](http://ru.wikipedia.org/wiki/Декоратор_(шаблон_проектирования\\)). Я рассмотрел некоторые из этих моделей в другой моей бесплатной книге \"JavaScript Design Patterns For Beginners\". Если вы хотите, можете прочитать ее следом.\r\n\r\nКак мы уже выяснили, модели представляют собой данные приложения, а представления формируют то, что пользователь увидит на экране.\r\nПо существу, MVC полагается на Пуб./Подп. для части его основных взаимодействий (удивительно, что в большинстве статей о MVC шаблонах это не рассматривается). Когда модель изменяется, она \"публикует\" для остального приложения, что она обновилась. Затем \"подписчик\" (в общем случае Контроллер) обновляет соответствующим образом Представление. Наблюдатель-представитель, характер этой связи в том, что это облегчает привязку нескольких представлений к одной модели.\r\n\r\nДля разработчиков, заинтересованных в получении дополнительных знаний о раздельной природе MVC (опять же, в зависимости от реализации), одна из целей паттерна оказать помощь, в реализации связей один-ко-многим между объектом и его наблюдателями. Когда объект изменяется, его наблюдатели тоже обновляются. Взаимодействия представлений и контроллеров немного отличаются. Контроллеры помогают представлениям реагировать на различный пользовательский ввод и являются примером шаблона [Стратегия](http://ru.wikipedia.org/wiki/Стратегия_(шаблон_проектирования\\))\r\n\r\n###Выводы\r\nРассмотрев классическую MVC модель, вы должны понимать, как она позволяет разработчикам четко разделить задачи в приложении. Также, вы должны представлять себе, чем JavaScript MVC фреймворки могут различаться в своих интерпретациях MVC, и как они расширяют некоторые основные концепции оригинальной схемы.\r\n\r\nПри рассмотрении нового JavaScript MVC/MV* фреймворка помните - возможно, будет полезно отступиться и рассмотреть какой у него подход к Моделям, Представлениям и Контроллерам или их альтернативам, поскольку это может лучше помочь с выбором используемого фреймворка.\r\n\r\n\r\n##MVP\r\n\r\nModel-view-presenter (MVP) - производный от MVC шаблон проектирования, который фокусируется на улучшений логики презентации. Он появился в компании именуемой  [Taligent](http://en.wikipedia.org/wiki/Taligent) вначале 1990-х, когда они работали над моделью C++ для окружения CommonPoint. И хотя цель MVC и MVP в разделении задач между множеством компонентов, они имеют некоторые фундаментальные различия.\r\n\r\nПодводя итоги, мы рассмотрим версию MVP наиболее подходящую для архитектуры веб.\r\n\r\n###Модель, Представление & Presenter \r\n\r\nP, в составе MVP, поставлена для Presenter’а. Это компонент, который содержит бизнес логику для пользовательского интерфейса Представления. В отличие от MVC, обращения из представления делегируются Presenter’у, который не связан с представлением, а общается с ним через интерфейс. Это способствует множеству полезных вещей, таких как, возможность проводить над представлениями unit тесты. \r\n\r\nНаиболее общая реализация MVP использует пассивные представления (представления для всевозможных целей «манекены»), практически не содержащие логики.\r\n Модели в MVP практически идентичны моделям в MVC, они обрабатывают данные приложения. Presenter  работает как посредник, общаясь и с представлением, и с моделью, однако, попарно они изолированы друг от друга. Он эффективно связывает модели и представления, обеспечивая функцию Контроллеров в MVC. Presenter  являются сердцем MVP шаблона, и как вы можете догадываться, включают логику отображения представлений.\t\r\n\r\nПо запросу представления, Presenter’ы выполняют любую работу с пользовательскими данными и обратно передают им данные. Таким образом, они получают данные, манипулируют с ними и определяют, как данные должны быть отображены в представлении. В некоторых реализациях Presenter  также взаимодействует с серверной частью хранящей данные (модели). Модели могут порождать события, а роль Presenter’ы быть для них подписчиком, и обновлять представления. В пассивной архитектуре мы имеем концепцию прямой привязки данных, Представления предоставляют сеттеры, через которые Presenter’ы могут предоставлять им дынные.\r\n \t\r\nПреимущество этих изменений MVC в увеличении тестируемости ваших приложений, и предоставлении более четкого разделения представления и модели. Однако это имеет и свою цену, отсутствие поддержки привязки данных в шаблоне часто оказывается еще одной задачей, позаботиться о которой надо отдельно.\r\n\t\r\nНесмотря на то, что основная реализация [Пассивных представлений](http://martinfowler.com/eaaDev/PassiveScreen.html) - это представления создающие интерфейс, есть различные их варианты, вплоть до событий, которые могут еще больше разделить Presenter’а и Представления. Так как у нас нет интерфейса, построенного на JavaScript, мы будем больше пользоваться им как протоколом, нежели как интерфейсом описанным тут. Технически - это по-прежнему набор  API, и для нас удобнее рассматривать интерфейс с этой точки зрения.\r\n\r\nЕще есть разновидность MVP [Supervising Controller](http://martinfowler.com/eaaDev/SupervisingPresenter.html), которая ближе к MVC и [MVVM](http://en.wikipedia.org/wiki/Model_View_ViewModel) шаблонам, так как она предоставляет привязку данных из модели напрямую к представлениям. Модули, отслеживающие пары ключ-значение (KVO) (к примеру Backbone.ModelBinding от Derick Bailey's) внедряют идею Supervising Controller в Backbone.\r\n\r\n##MVP или MVC?\r\n\r\nMVP в основном используется в приложениях энтерпрайз уровня, где необходим наибольший процент повторного использования кода в логики представлений. Приложения с очень сложными представлениями и сложным взаимодействием с пользователем могут обнаружить, что MVC не совсем подходит для решения этих задач и в большей степени полагается на многочисленные контроллеры. В MVP вся сложная логика может быть заключена в представлении, которое в дальнейшем намного проще в сопровождении.\r\n\r\nВ MVP представления определяются через интерфейс и интерфейс технически только точка взаимодействия между системой и представлением (не Presenter’ом), этот паттерн также позволяет разработчикам писать логику представления, не дожидаясь готового каркаса для приложения от дизайнеров.\r\n\r\nВ зависимости от реализации MVP легче обрабатывается unit-тестами, чем MVC. Это объясняется тем, что Presenter  может быть использован как завершенный макет пользовательского интерфейса и поэтому его можно тестировать отдельно от других компонентов. В моем опыте это зависит от языка, на котором вы реализуете MVP, в этом разница между выбором MVP для проекта на JavaScript и, к примеру, на ASP.net.\r\n\r\nВ итоге, проблемы, которые мы можем получить при использовании MVP, будут схожи с проблемами в MVC, потому что различаются эти шаблоны только семантически. Чем четче вы разделяете логику между моделями, представлениями и контроллерами (Presenter’ами) тем больше вы получите выгоды, не зависимо от того, какой шаблон проектирования используете.\r\n \r\n##MVC, MVP и Backbone.js\r\n\r\nОчень мало архитектурных Фреймворков JavaScript, в которых утверждается реализация MVC или MVP шаблонов в их классической форме, многие JavaScript разработчики не рассматривают MVC и MVP как взаимоисключающие подходы (Более полную реализацию структуры MVP можно увидеть в веб-фреймворках таких как ASP.net или GWT). Причина в  возможности иметь дополнительную логику для Presenter’а/представления в вашем приложении, по-прежнему рассматривая его в красках MVC. \r\n\r\nBackbone contributor [Irene Ros](http://ireneros.com/) подтверждает этот образ мышления, когда она отделяет Backbone Представления в отдельный компонент, и ей нужно что-то, что обеспечило бы актуальные взаимосвязи с ними. Это могут быть контроллеры маршрутов (такие как ```Backbone.Router```, будет рассмотрен ниже) или callback в ответ на получение данных.\r\n\r\nНекоторые разработчики считают, что Backbone.js лучше подходит под описание MVP чем MVC\r\n. Их мнение заключается в следующем:\r\n\r\n* Presenter в MVP лучше объясняет ```Backbone.View``` (прослойка между шаблоном Представления и привязанными к нему данными) чем контроллер в MVC.\r\n* Модели соответствуют ```Backbone.Model``` (они не имеют различий с классическими «Моделями» MVC)  \r\n* Представления наилучшим образом представлены шаблонами (т.к. Handlebars/Mustache шаблоны)\r\n\r\nОтветом на этом может послужить то, что представления могут быть просто Представлениями (как в MVC) потому что Backbone достаточно гибкий, чтобы использовать их для различных целей. V в MVC и P в MVP оба могут реализовываться ```Backbone.View``` он в состоянии реализовать две эти сущности: могут создавать отдельные представления и объединять несколько представлений в одном.\r\n\r\nМы также видели, что в Backbone обязанности контроллеров разделены между Backbone.View и Backbone.Router и в следующем примере мы можем убедиться, что это действительно так.\r\n \r\nНаш Backbone ```PhotoView``` шаблон Наблюдателя чтобы 'подписаться' на изменения в Модели данного Представления  ```this.model.bind('change',...)```. Тут также обрабатываются шаблоны методом ```render()```, но, в отличии от некоторых других реализации, взаимодействия с пользователем также обрабатываются в Представлении (см. ```events```).\r\n\r\n\r\n```javascript\r\nvar PhotoView = Backbone.View.extend({\r\n\r\n    //... тег списка.\r\n    tagName:  \"li\",\r\n\r\n    //Пропускаем содержимое шаблона photo-template через функцию \r\n    // шаблонизатора, кэширующего его для одной фотографии.\r\n    template: _.template($('#photo-template').html()),\r\n\r\n    // Определяем специфичные для Представления события DOM\r\n    events: {\r\n      \"click img\" : \"toggleViewed\"\r\n    },\r\n\r\n    // PhotoView слушает изменения и перерисовывается (пр. перев. re-rendering).\r\n    // Поскольку в этом приложений выполнено однозначное соответствие между **Photo** \r\n    // и **PhotoView**, мы используем прямые ссылки на модели для удобства.\t\r\n\r\n    initialize: function() {\r\n      _.bindAll(this, 'render');\r\n      this.model.bind('change', this.render);\r\n      this.model.bind('destroy', this.remove);\r\n    },\r\n\r\n    // Перерисовать элемент photo \r\n    render: function() {\r\n      $(this.el).html(this.template(this.model.toJSON()));\r\n      return this;\r\n    },\r\n\r\n    // Переключение состояния `\"viewed\"` у модели.\r\n    toggleViewed: function() {\r\n      this.model.viewed();\r\n    }\r\n\r\n});\r\n```\r\n\r\n\r\nДругое, (полностью отличающееся) мнение состоит в том, что у Backbone больше сходства с [Smalltalk-80 MVC](http://martinfowler.com/eaaDev/uiArchs.html#ModelViewController), который мы рассматривали ранее.\r\n\r\nАктивный пользователь Backbone Derick Bailey [написал](http://lostechies.com/derickbailey/2011/12/23/backbone-js-is-not-an-mvc-framework/), что лучше всего не приписывать Backbone каких-либо специфичных шаблонов разработки. Дизайн шаблонов проектирования должен обладать гибкостью относительно структурирования приложения, и в соответствии с этим Backbone не имеет четкого соответствия с MVC или MVP. Вместо этого он заимствует лучшие концепции из различных архитектурных шаблонов и создает гибкую структуру, которая просто хорошо работает. Назовем это **Путь Backbone **, MV* или подобным образом, что лучше отразит особенности архитектуры приложения. \r\n \r\n*Но*, стоит понимать, где и почему возникли эти понятия, и я надеюсь, что мои объяснения MVC и MVP помогут вам в этом. Различные JavaScript Фреймворков будут иметь в своей основе различные классические шаблоны, намеренно или случайно, но главное в том, что они позволяют нам разрабатывать структурированные, простые в поддержке приложения с чистым и читаемым кодом. \r\n\r\n##Краткие итоги\r\n\r\n###Backbone.js\r\n\r\n* Основные составляющие компоненты: Модель, Представление, Коллекция, Маршрутизатор. Собственный стиль MV*\r\n* Хорошая и постоянно улучшаемая документация  \r\n* Используется большими компаниями, такими как SoundCloud и Foursquare, для создания нетривиальных приложений.\r\n* Событийно-ориентированные взаимодействия между представлениями и моделями. Как будет видно позднее, это позволяет напрямую добавлять слушателей событий к любым атрибутам модели, что дает разработчикам возможность детального контроля над изменениями в представлениях.\r\n* Поддержка привязки данных через самостоятельно созданные события либо специальной библиотекой для наблюдения связей ключ-значение (KVO). (пр. пре. Key-value observing)\r\n* Прекрасная поддержка RESTful интерфейса из коробки, обеспечивает легкое связывание модели с бакэндом.\r\n* Обширная система регистрации событий. Добавить поддержку пуб./под. в Backbone - это [обычное дело](http://lostechies.com/derickbailey/2011/07/19/references-routing-and-the-event-aggregator-coordinating-views-in-backbone-js/) - \r\n* Экземпляры прототипов по ключевому слову ```new```.\r\n* Не имеет привязки к какому-то определенному шаблонизатору, но шаблонизатор Underscore предоставляется по умолчанию. Backbone хорошо работает с библиотеками, подобными Handlebars\r\n* Не поддерживает вложенных моделей, для этого есть плагины к Backbone, например [этот](https://github.com/PaulUithol/Backbone-relational) which can help   \r\n* Ясные и гибкие соглашения о структурировании приложений. Backbone не заставляет использовать все компоненты, и позволяет работать только с необходимым набором.\r\n\r\n\r\n\r\n\r\n\r\n##<a name=\"thebasics\">Основы</a>\r\n\r\n###Что такое Backbone?\r\n\r\nBackbone.js это один из JavaScript Фреймворков для создания MVC-подобных веб-приложений. Для front-end'a я выбрал этот архитектурный Фреймворк, потому что он зрелый, относительно легкий, при этом легко тестируемый сторонними инструментами, такими как Jasmine или QUnit. Другие MVC фреймворки, с которыми вы возможно знакомы Ember.js (SproutCore 2.0), Spine, YUILibrary и JavaScriptMVC.\r\n\r\nBackbone сопровождается несколькими разработчиками, наиболее известный из них: Jeremy Ashkenas, создатель CoffeeScript, Docco и Underscore.js. По убеждению Jeremy детальная документация определяет уровень комфорта в изучении, поэтому вы вряд ли столкнетесь с вопросами, не освещенными в официальной документации, либо с которыми нельзя справиться с помощью IRC канала #documentcloud. Я настоятельно рекомендую второй ресурс, если вам кажется, что вы застряли.\r\n \r\n###Почему вам стоит рассмотреть возможность использовать это?\r\n\r\nПреимущества Backbone не зависящие от выбранной вами платформы, или устройства заключены в следующем:\r\n\r\n* организация структуры вашего приложения\r\n* Упрощение сохранения информации на сервер. \r\n* Разделение DOM ваших страниц от данных\r\n* Модели данных, представления и роутеры в компактной форме.\r\n* Предоставляет синхронизацию между DOM, моделями и коллекциями моделей.\r\n \r\n\r\n##Основы\r\n\r\nВ этой секции вы узнаете необходимый минимум о моделях, представлениях и роутерах Backbone, а также об использовании пространства имен для организации вашего кода. Этот документ можно считать заменой официальной документации, также он поможет детальнее рассмотреть основополагающие концепций поведения Backbone до началом создания приложений с использованием этого Фреймворка. \r\n\r\n* Модели\r\n* Коллекции\r\n* Роутеры\r\n* Представления\r\n* Пространства имен\r\n\r\n###<a name=\"models\">Модели</a>\r\n\r\nМодели Backbone содержат рабочий набор данных приложения, а также логику, связанную с этими данными. Например, мы можем использовать модель для представления понятия  объекта фотографии, включая ее атрибуты, такие как метки, заголовок и локация.\r\n\r\nМодель создается расширением класса `Backbone.Model` следующим образом:\r\n\r\n```javascript\r\nvar Photo = Backbone.Model.extend({\r\n    defaults: {\r\n        src: 'placeholder.jpg',\r\n        title: 'an image placeholder',\r\n        coordinates: [0,0]\r\n    },\r\n    initialize: function(){\r\n        this.bind(\"change:src\", function(){\r\n            var src = this.get(\"src\"); \r\n            console.log('Источник изображения изменен на:' + src);\r\n        });\r\n    },\r\n    changeSrc: function( source ){\r\n        this.set({ src: source });\r\n    }\r\n});\r\n \r\nvar somePhoto = new Photo({ src: \"test.jpg\", title:\"testing\"});\r\nsomePhoto.changeSrc(\"magic.jpg\"); // Вызываем событие \"change:src\" и выводим сообщение об обновлений на консоль.\r\n\r\n```\r\n\r\n####Инициализация\r\n\r\nМетод `initialize()` вызывается при создании экземпляра модели. Он опционален, но ниже будет показано, что его использование является хорошей практикой.\r\n \r\n```javascript\r\nvar Photo = Backbone.Model.extend({\r\n    initialize: function(){\r\n        console.log('эта модель была инициализирована');\r\n    }\r\n});\r\n \r\n/* Затем мы можем создать экземпляр нашей модели, как показано ниже:*/\r\nvar myPhoto = new Photo();\r\n```\r\n\r\n####Геттеры и Сеттеры (Getters & Setters)\r\n\r\n**Model.get()**\r\n\r\n`Model.get()` предоставляет простой способ получения атрибутов модели. Атрибуты, переданные в модель при создании ее экземпляра сразу являются доступными для извлечения.\r\nAttributes which are passed through to the model on instantiation are instantly available for retrieval.\r\n\r\n```javascript\r\nvar myPhoto = new Photo({ title: \"My awesome photo\", \r\n                          src:\"boston.jpg\", \r\n                          location: \"Boston\", \r\n                          tags:['the big game', 'vacation']}),\r\n                          \r\n    title = myPhoto.get(\"title\"), //My awesome photo\r\n    location = myPhoto.get(\"location\"), //Boston\r\n    tags = myPhoto.get(\"tags\"), // ['the big game','vacation']\r\n    photoSrc = myPhoto.get(\"src\"); //boston.jpg\r\n```\r\n\r\nПомимо этого, если вы хотите получить напрямую все атрибуты модели, это можно сделать следующим образом:\r\n\r\n```javascript\r\nvar myAttributes = myPhoto.attributes;\r\nconsole.log(myAttributes);\r\n```\r\n\r\nПравильно устанавливать атрибуты модели, используя метод `Model.set()` или напрямую передавать их при создании экземпляра модели.\r\n \r\nДоступ напрямую через `Model.attributes` в основном сбивает с толку. В место этого, если нужно читать или клонировать данные, используйте метод `Model.toJSON()` предназначенный для этого. Допустим вам надо получить копию атрибутов модели для JSON стрингификации (например, для предварительной сериализации перед их передачей в представление), это делается использованием `Model.toJSON()`:\r\n\r\n\r\n```javascript\r\nvar myAttributes = myPhoto.toJSON();\r\nconsole.log(myAttributes);\r\n/* this returns { title: \"My awesome photo\", \r\n             src:\"boston.jpg\", \r\n             location: \"Boston\", \r\n             tags:['the big game', 'vacation']}*/\r\n```\r\n\r\n####Model.set()\r\n\r\n`Model.set()` дает вам возможность передать атрибуты в экземпляр модели. Атрибуты могут устанавливаться либо во время инициализации, либо в любое другое время после этого. Важно избегать попыток установки атрибутов напрямую, (к примеру, Model.caption = 'A new caption'). Backbone использует Model.set() чтобы быть в курсе и сообщать об изменениях в данных модели.\r\n\r\n\r\n```javascript\r\nvar Photo = Backbone.Model.extend({\r\n    initialize: function(){\r\n        console.log('эта модель была инициализирована');\r\n    }\r\n});\r\n \r\n/* Установка значений атрибутов при инициализации.*/\r\nvar myPhoto = new Photo({ title: 'My awesome photo', location: 'Boston' });\r\n \r\nvar myPhoto2 = new Photo();\r\n\r\n/*Установка атрибутов модели через Model.set()*/\r\nmyPhoto2.set({ title:'Vacation in Florida', location: 'Florida' });\r\n```\r\n\r\n**Значения по умолчанию**\r\n\r\nИногда вы можете захотеть, чтобы ваша модель имела значения по умолчанию (например, в случае, где пользователь может не предоставить полный набор данных). Их можно установить, используя свойство модели `defaults`.\r\n\r\n```javascript\r\nvar Photo = Backbone.Model.extend({\r\n    defaults:{\r\n        title: 'Another photo!',\r\n        tags:  ['untagged'],\r\n        location: 'home',\r\n        src: 'placeholder.jpg'\r\n    },\r\n    initialize: function(){\r\n    }\r\n});\r\n \r\nvar myPhoto = new Photo({ location: \"Boston\", \r\n                          tags:['the big game', 'vacation']}),\r\n    title   = myPhoto.get(\"title\"), //Another photo!\r\n    location = myPhoto.get(\"location\"), //Boston\r\n    tags = myPhoto.get(\"tags\"), // ['the big game','vacation']\r\n    photoSrc = myPhoto.get(\"src\"); //placeholder.jpg\r\n```\r\n\r\n**Слежение за изменения в модели **\r\n\r\nВ моделях Backbone все атрибуты вместе, либо каждый отдельный атрибут может иметь слушателя, который следит за изменениями их значений. Слушатели могут быть добавлены через функцию `initialize()`:\r\n \r\n```javascript\r\nthis.bind('change', function(){\r\n    console.log('значение модели было изменено');\r\n});\r\n```\r\n\r\nВ следующем примере мы выводим сообщения всякий раз, когда определенные атрибуты (заголовок нашей модели Фото) изменяются. \r\n\r\n```javascript\r\nvar Photo = Backbone.Model.extend({\r\n    defaults:{\r\n        title: 'Another photo!',\r\n        tags:  ['untagged'],\r\n        location: 'home',\r\n        src: 'placeholder.jpg'\r\n    },\r\n    initialize: function(){\r\n        console.log('эта модель была инициализирована');\r\n        this.bind(\"change:title\", function(){\r\n            var title = this.get(\"title\");\r\n            console.log(\"Мой заголовок был изменен на: \" + title);\r\n        });\r\n    },\r\n    \r\n    setTitle: function(newTitle){\r\n        this.set({ title: newTitle });\r\n    }\r\n});\r\n \r\nvar myPhoto = new Photo({ title:\"Рыбалка на озере\", src:\"fishing.jpg\"});\r\nmyPhoto.setTitle('Рыбалка на море'); \r\n//лог «Мой заголовок был изменен на: Рыбалка на море.»\r\n```\r\n\r\n**Валидация**\r\n\r\nBackbone поддерживает валидацию данных через функцию `Model.validate()`, которая позволяет проверить значения атрибутов во время их установки. \r\n\r\nФункции валидации могут быть простыми или сложными при необходимости. Если представленные атрибуты являются валидными, то `.validate()` ничего не возвращает. В ином случае можно вернуть произвольную ошибку. \r\n\r\nОбщий пример валидации: \r\n\r\n```javascript\r\nvar Photo = Backbone.Model.extend({\r\n    validate: function(attribs){\r\n        if(attribs.src === undefined){\r\n            return \"Не забудьте указать расположение изображения!\";\r\n        }\r\n    },\r\n    \r\n    initialize: function(){\r\n        console.log('эта модель была инициализирована');\r\n        this.bind(\"error\", function(model, error){\r\n            console.log(error);\r\n        });\r\n    }\r\n});\r\n \r\nvar myPhoto = new Photo();\r\nmyPhoto.set({ title: \"On the beach\" });\r\n// лог «Не забудьте указать расположение изображения!»\r\n```\r\n\r\n\r\n\r\n###<a name=\"views\">Представления</a>\r\n\r\nПредставления в Backbone не содержат разметку для вашего приложения, они в первую очередь содержат логику того, как модель будет показана пользователю. Это, как правило, достигается использованием JavaScript шаблонизаторов (Mustache, jQuery-tmpl и т.д.). Функция `render()` в представлении может быть привязана к событию модели `change()`, это позволит представлению быть всегда обновленным, без необходимости перезагрузки всей страницы.\r\n\r\n\r\n####Создание нового представления\r\n\r\nКак и в предыдущем разделе, создание представлений относительно прямолинейно. Чтобы создать новое Представление нужно просто расширить `Backbone.View`. Подробнее я рассмотрю этот код ниже:\r\n\r\n```javascript\r\nvar PhotoSearch = Backbone.View.extend({\r\n    el: $('#results'),\r\n    render: function( event ){\r\n        var compiled_template = _.template( $(\"#results-template\").html() );\r\n        this.el.html( compiled_template(this.model.toJSON()) );\r\n        return this; // рекомендуется для поддержки цепочки вызовов.\r\n    },\r\n    events: {\r\n        \"submit #searchForm\":  \"search\",\r\n        \"click .reset\": \"reset\",\r\n        \"click .advanced\": \"switchContext\"\r\n    },\r\n    search: function( event ){\r\n        //выполняется при отправке формы '#searchForm'.\r\n    },\r\n    reset: function( event ){\r\n        //выполняется при клике на элемент с классом \"reset\".\r\n    },\r\n    switchContext: function( event ){\r\n        // выполняется при клике на элемент с классом \"advanced\".\r\n    }\r\n});\r\n```\r\n\r\n####Что такое `el`?\r\n\r\n`el` как правило, это ссылка на DOM элемент, и все представления должны иметь ее. Она нужна, чтобы вставлять все содержимое представления в определенном узле DOM на страницы, это делает более быстрым рендеринг страницы и позволяет минимизировать перерисовки выполняемые барузером.\r\n\r\nЕсть два способа добавлять DOM элементы представлений: либо элемент уже существуют на странице, либо это вновь созданный элемент для представления добавленный разработчиком.\r\nЕсли элемент уже существует, вы можете назначить `el` либо CSS селектор, ссылающийся на этот элемент, либо прямую ссылку на DOM элемент.\r\n\r\n```javascript\r\nel: '#footer', \r\n// ИЛИ\r\nel: document.getElementById( 'footer' )\r\n```\r\nЕсли вы хотите создать новый элемент для представления, установите в любой комбинации следующие свойства представления: `tagName`, `id` и `className`. Новый элемент будет создан для вас Фреймворком и ссылка на этот элемент будет доступна через свойство `el`.\r\n\r\n```javascript\r\ntagName: 'p', //обязательно, если не устанавливается, то по умолчанию будет 'div' \r\nclassName: 'container', //опционально, вы можете назначить несколько классов разделяя их пробелом 'container homepage'\r\nid: 'header', //опционально\r\n```\r\n\r\nКод, размещенный выше, создает ```DOMElement```, показанный ниже, но не добавляет его к DOM страницы.\r\n\r\n```html\r\n<p id=\"header\" class=\"container\"></p>\r\n```\r\n\r\n\r\n**Понимание `render()`**\r\n\r\nНе обязательная функция `render()` определяет логику рендеринга шаблона. Здесь мы будем использовать микро-шаблонизатор Underscore для примеров, но знайте, вы можете использовать любой другой шаблонизатор, который вы предпочитаете. \r\n\r\nМетод `_.template` в Underscore компилирует JavaScript шаблон в функцию, которая может быть вызвана для рендеринга. В представлении, рассмотренном выше, я передаю шаблон с  id `results-template` в `_.template()` для его компиляции. Затем DOM элементу `el` в его html метод (пр. перевод.: предоставленный jQuery) я передаю скомпилированную функцию, которая в качестве параметров получает JSON версию связанной с представлением модели.\r\n\r\n\r\nPresto! Шаблон заполняется данными модели, и на выходе вы получаете готовый html всего парой строк кода.\r\n \r\n**Атрибут `events` **\r\n\r\nАтрибут Backbone `events` позволяет добавлять слушателей событий различным селекторам либо напрямую к `el`, если селекторов нет. Привязка имеет следующую форму `{\"имяСобытия селектор\": \"реагирующаяФункция\"}` (пр. перевод.: возможно, это не удачный перевод `{\"eventName selector\": \"callbackFunction\"}`) и поддерживает различные типы событий, включая  `click`, `submit`, `mouseover`, `dblclick` и т.д. \r\n\r\nЭто не очевидно, но под капотом Backbone использует jQuery метод `.delegate()`, чтобы обеспечить оперативное делегирование событий, при этом немного расширяя этот метод, для того чтобы `this` всегда указывал на текущий объект представления. Единственное, что надо запомнит это то, что каждая строка описывающая привязку события должна иметь свою собственную реагирующую функцию доступную в области видимости данного представления. \r\n \r\n\r\n###<a name=\"collections\">Коллекции</a>\r\n\r\nКоллекции представляет собой набор Моделей и создается расширением `Backbone.Collection`.\r\n\r\nОбычно, при создании коллекции одним из ее свойств указывают соответствующую модель, которые будет содержать эта коллекция, а также свойства, которые обязательны.\r\n\r\n\r\nВ следующем примере мы создаем коллекцию PhotoCollection, которая будет содержать наши модели Photo:\r\n\r\n```javascript\r\nvar PhotoCollection = Backbone.Collection.extend({\r\n    model: Photo\r\n});\r\n```\r\n\r\n** Геттеры и Сеттеры (Getters and Setters)**\r\n\r\nЕсть несколько различных способов получить модели из коллекции. Наиболее прямолинейный в использовании `Collection.get()` принимающий идентификатор (пр. перевод.: далее по тексту “id”) модели: \r\n\r\n\r\n```javascript\r\nvar skiingEpicness = PhotoCollection.get(2);\r\n```\r\n\r\nИногда может понадобиться получить модель по клиентскому id. Клиентский id – это свойство, которое Backbone автоматически присваивает модели, которая еще не была сохранена. Вы можете получить клиентский id модели из ее свойства `.cid`.\r\n\r\n\r\n```javascript\r\nvar mySkiingCrash = PhotoCollection.getByCid(456);\r\n```\r\n\r\nКоллекции Backbone не имеют сеттеров, как таковых, но они поддерживают добавление моделей через `.add()` и их удаление через `.remove()`.\r\n\r\n\r\n```javascript\r\nvar a = new Backbone.Model({ title: 'my vacation'}),\r\n    b = new Backbone.Model({ title: 'my holiday'});\r\n\r\nvar photoCollection = new PhotoCollection([a,b]);\r\nphotoCollection.remove([a,b]);\r\n```\r\n\r\n**Слушание событий**\r\n\r\nТак как коллекция представляет собой группу элементов, мы можем слушать события `add` и `remove` при добавлении и удалении моделей в коллекции. Вот пример: \r\n\r\n\r\n```javascript\r\nvar PhotoCollection = new Backbone.Collection();\r\nPhotoCollection.bind(\"add\", function(photo) {\r\n  console.log(\"I liked \" + photo.get(\"title\") + ' its this one, right? '  + photo.get(\"src\"));\r\n});\r\n \r\nPhotoCollection.add([\r\n  {title: \"My trip to Bali\", src: \"bali-trip.jpg\"},\r\n  {title: \"The flight home\", src: \"long-flight-oofta.jpg\"},\r\n  {title: \"Uploading pix\", src: \"too-many-pics.jpg\"}\r\n]);\r\n```\r\n\r\nВдобавок к этому мы можем привязаться к событию модели `change`, чтобы реагировать на изменения моделей в коллекции.\r\n\r\n```javascript\r\nPhotoCollection.bind(\"change:title\", function(){\r\n    console.log('произошли изменения “title” свойств моделей в этой коллекции.');    \r\n});\r\n```\r\n\r\n**Получение моделей с сервера**\r\n\r\n`Collections.fetch()` извлекает дефолтный набор моделей с сервера в формате JSON массива. По окончанию приема данных с сервера, текущее содержимое коллекции заменяется полученным массивом.\r\n \r\n\r\n```javascript\r\nvar PhotoCollection = new Backbone.Collection;\r\nPhotoCollection.url = '/photos';\r\nPhotoCollection.fetch();\r\n```\r\n\r\nЗа кулисами Backbone всегда вызывает функцию `Backbone.sync` при чтении или сохранении моделей на сервер. При этом используется jQuery или Zepto реализация Ajax для выполнения RESTful запроса, однако данное поведение может быть изменено по вашему желанию.\r\n\r\nЕсли вы хотите логировать каждый вызов `.sync()`  в примере выше, вы можете сделать следующее:\r\n\r\n```javascript\r\nBackbone.sync = function(method, model) {\r\n  console.log(\"Передано методу \" + method + \" с \" + JSON.stringify(model));\r\n};\r\n```\r\n\r\n**Сброс/Обновление Коллекции **\r\n\r\nВместо добавления или удаления моделей индивидуально, возможно вам понадобиться обновить всю коллекцию сразу. `Collection.reset()` позволяет заменить все модели коллекции, как показано ниже:   \r\n\t\r\n```javascript\r\nPhotoCollection.reset([\r\n  {title: \"My trip to Scotland\", src: \"scotland-trip.jpg\"},\r\n  {title: \"The flight from Scotland\", src: \"long-flight.jpg\"},\r\n  {title: \"Latest snap of lock-ness\", src: \"lockness.jpg\"}\r\n]);\r\n```\r\n\r\n###Вспомогательные функции Underscore \r\n\r\nТак как Backbone зависит от Underscore (<i>пр. перевод.: советую взглянуть на</i> [Lo-Dash](https://github.com/bestiejs/lodash)), мы можем использовать множество полезных утилит, предлагаемых этой библиотекой. Ниже приведен пример того, как можно сортировать коллекцию моделей по определенному атрибуту модели, используя для этого метод Underscore `sortBy()`.\r\n\r\n```javascript\r\nvar sortedByAlphabet = PhotoCollection.sortBy(function (photo) {\r\n    return photo.get(\"title\").toLowerCase();\r\n});\r\n```\r\n\r\nПолный список того, что может делать Underscore выходит за рамки данного руководства, вы можете прочитать об этом самостоятельно в [документации](http://underscorejs.ru/).\r\n \r\n###<a name=\"routers\">Маршрутизаторы</a>\r\n\r\n<i>Примечание переводчика: Здесь и далее по тексту Router переводится как Маршрутизатор, route как маршрут</i>\r\n\r\nМаршрутизаторы в Backbone призваны помочь в управлении состоянием приложения и привязать переходы по URL’ам к событиям приложения. Они активируют использование хэш-тегов с фрагментами URL, или используют pushState и History API браузера. Небольшой пример маршрутов приведен ниже:\r\n\r\n```html\r\nhttp://unicorns.com/#whatsup\r\nhttp://unicorns.com/#search/seasonal-horns/page2\r\n```\r\n\r\nПримечание: В приложении, как правило, хотя бы один маршрутизатор является отображением URL’a на функцию, которая определяет реакцию приложения на переход пользователя по данному URL. Эта взаимосвязь определяется следующим образом:    \r\n\r\n```javascript\r\n\"route\" : \"mappedFunction\"\r\n```\r\n\r\nДавайте создадим наш первый контроллер расширением `Backbone.Router`. В рамках данного руководства мы будем продолжать создание нашего обучающего проекта фото галереи, для которой нам необходим GalleryRouter.\r\n\r\nОбратите внимание на комментарии в коде ниже, потому что в них содержится следующая часть данного урока.\r\n\r\n```javascript\r\nvar GalleryRouter = Backbone.Router.extend({\r\n    /* Определяем маршруты и привязанные к ним функции */\r\n    routes: {\r\n        \"about\" : \"showAbout\",\r\n        /* Пример использования: http://unicorns.com/#about */\r\n        \r\n        \"photos/:id\" : \"getPhoto\",\r\n        /* Пример использования переменной \":параметр\", которая будет \r\n           соответствовать определенному компоненту между парой слешей URL. */\r\n        /* Пример использования: http://unicorns.com/#photos/5 */\r\n        \r\n        \"search/:query\" : \"searchPhotos\"\r\n        /* Также можно привязывать множество маршрутов к одной и той же функции,\r\n           в данном случае к searchPhotos(). */\r\n        /* Пример использования: http://unicorns.com/#search/lolcats */\r\n         \r\n        \"search/:query/p:page\" : \"searchPhotos\",\r\n        /* Функция получит необязательный номер страницы, если он был передан.\r\n           Как видите, URL’ы могут содержать много \":параметр\"ов, столько сколько нам нужно. */\r\n        /* Пример использования: http://unicorns.com/#search/lolcats/p1 */\r\n        \r\n        \"photos/:id/download/*imagePath\" : \"downloadPhoto\",\r\n        /* В этом примере используется знак *, он позволяет \":параметр\"у соответствовать \r\n           любому количеству компонентов URL. */\r\n        /* Пример использования: http://unicorns.com/#photos/5/download/files/lolcat-car.jpg*/\r\n        \r\n        /* Если вы хотите использовать знак * для маршрутизации по умолчанию, уместно\r\n           будет помещать этот параметр в конце, иначе вам придется применять\r\n           к полученному фрагменту регулярные выражения */ \r\n         \r\n        \"*other\"    : \"defaultRoute\"\r\n        /* Этот маршрут по умолчанию также использует знак *. Этот шаблон маршрута\r\n           по умолчанию для всех URL’ов, которые либо не обрабатываются маршрутизаторами выше,\r\n           либо для ошибочного ввода от пользователя. */\r\n        /* Пример использования: http://unicorns.com/#anything */\r\n \r\n    },\r\n    \r\n    showAbout: function(){\r\n    },\r\n    \r\n    getPhoto: function(id){\r\n        /* \r\n        Обратите внимание, что id параметр, совпавший в маршруте передается в функцию.\r\n        */\r\n        console.log(\"Вы пытаетесь получить фото \" + id);\r\n    },\r\n    \r\n    searchPhotos: function(query, page){\r\n        console.log(\"Страница номер \" + page + \" результатов для \" + query);\r\n    },\r\n    \r\n    downloadPhoto: function(id, path){\r\n    },\r\n    \r\n    defaultRoute: function(other){\r\n        console.log(\"Ошибка. Попытка получить:\" + other);\r\n    }\r\n});\r\n \r\n/* Когда Маршрутизатор готов, не забудьте создать его экземпляр. */\r\n \r\nvar myGalleryRouter = new GalleryRouter();\r\n```\r\n\r\n\r\nС версии Backbone 0.5+ появилась поддержка pushState из HTML5 через `window.history.pushState`. Это позволяет вам создавать маршруты на подобии этого http://www.scriptjunkie.com/just/an/example. В браузерах не поддерживающих pushState будет наблюдаться падение производительности. В рамках этого руководства мы будем использовать метод использующий хэш-теги.\r\n\r\n\r\n####Backbone.history\r\n\r\nСледующим шагом нам надо инициализировать `Backbone.history` для обработки `hashchange` (пр. перевод.: для обработки смены хэша в строке навигации) в нашем приложении. Это позволит автоматически обрабатывать маршруты, определенные в  нашем приложении и вызывать их функции (callbacks) когда маршрут был посещен.\r\n\r\nМетод `Backbone.history.start()` просто сообщает Backbone, что можно начинать мониторить все `hashchange` события: \r\n\r\n```javascript\r\nBackbone.history.start();\r\nRouter.navigate();\r\n```\r\n\r\nЕсли вы хотите сохранять состояние URL приложения в определенный момент, вы можете использовать для этого метод `.navigate()`. Фрагмент URL будет обновляться без необходимости вызова события `hashchange`:\r\n   \r\n\r\n```javascript\r\n/* Допустим, мы хотим иметь конкретный фрагмент в URL, когда пользователь изменяет масштаб фотографии. */\r\nzoomPhoto: function(factor){\r\n    this.zoom(factor); //представим, что тут увеличивается изображение\t\r\n    this.navigate(\"zoom/\" + factor); // обновит для нас фрагмент URL, но не вызывает маршрут. \r\n}\r\n```\r\n\r\nТакже `Router.navigate()` может вызывать маршрут, при обновлении фрагмета URL.\r\n\r\n```javascript\r\nzoomPhoto: function(factor){\r\n    this.zoom(factor); //представим, что тут увеличивается изображение \r\n    this.navigate(\"zoom/\" + factor, true); // обновит для нас фрагмент URL, и вызовет маршрут. \r\n}\r\n```\r\n\r\n###<a name=\"namespacing\">Пространства имен</a>\r\n\r\nПри изучении Backbone важным понятием является пространство имен, однако, многие руководства забывают об этом. Если вы имеете практический опыт в области пространства имен JavaScript, то следующая секция добавит несколько полезных советов о том, как применить эти знания к специфике Backbone.  Так же в этой секции я буду объяснять это понятие и для новичков. \r\n\r\n\r\n####В чем смысл пространства имен?\r\n\r\nОсновная идея пространства имен в том, чтобы избежать коллизии имен переменных и объектов в глобальном пространстве имен. Это важно, и является наилучшей защитой от поломки вашего кода, при появлении на странице других скриптов, с такими же именами переменных, как и в вашем коде. И как хороший 'житель' глобального пространства имен, важно, чтобы вы делали максимум для предотвращения поломки скриптов других разработчиков. \r\n\r\nJavaScript не имеет встроенной поддержки пространства имен, как в других языках, зато имеет замыкания, которые помогут нам достичь схожего эффекта. \r\n\r\nВ этой секции мы рассмотрим короткие примеры организации пространства имен ваших моделей, представлений, маршрутизаторов и других компонентов. Шаблоны, которые мы рассмотрим:\r\n\r\n* Единственная глобальная переменная \r\n* Объектные литералы \r\n* Вложенные пространства имен \r\n\r\n**Единственная глобальная переменная**\r\n\r\nОдин из популярных шаблонов пространства имен в JavaScript - это единственная глобальная переменная, как объект доступа к переменным. Далее скелет реализации, в котором мы возвращаем объект с функциями и свойствами:\r\n\r\n```javascript\r\nvar myApplication = (function(){\r\n    function(){\r\n      // ...\r\n    },\r\n    return {\r\n      // ...\r\n    }\r\n})();\r\n```\r\n\r\nВы могли видеть эту технику раньше. Пример с Backbone:\r\n\r\n```javascript\r\nvar myViews = (function(){\r\n    return {\r\n        PhotoView: Backbone.View.extend({ .. }),\r\n        GalleryView: Backbone.View.extend({ .. }),\r\n        AboutView: Backbone.View.extend({ .. });\r\n        //и т.д.\r\n    };\r\n})();\r\n```\r\nЗдесь мы возвращаем набор представлений, но этот же метод можно использовать для всей коллекции моделей, представлений и маршрутизаторов, в зависимости от структуры вашего приложения. Это работает для определенных ситуаций, но самая большая проблема с шаблоном единственной глобальной переменной заключена в необходимости того, чтобы никто кроме вас не использовал имя этой глобальной переменной в пределах данной страницы.\r\n\r\nОдно из решений данной проблемы, предложенное Peter Michaux, это использовать префиксы пространства имен. В основе своей идея очень простая, использовать общие префиксы имен (в данном примере `myApplication_`), и после них указывать любые названия методов, переменных и других объектов.\r\n\r\n```javascript\r\nvar myApplication_photoView = Backbone.View.extend({}),\r\nmyApplication_galleryView = Backbone.View.extend({});\r\n```\r\n\r\nЭто эффективно, потому что вероятность существования идентичных имен в глобальном пространстве будет очень мала, но помните, объекты с уникальными именами дают тот же эффект. Недостатком этого шаблона является вероятность получить огромное количество глобальных объектов в результате роста вашего приложения. \r\n\r\nБольше информации о том, как Peter представляет себе шаблоне единственной глобальной переменной, читайте в его [прекрасной статье на эту тему](http://michaux.ca/articles/javascript-namespacing).\r\n\r\nПримечание: В дикой природе есть множество реализаций шаблона единственной глобальной переменной, но испробовав множество из них, я чувствую, что для Backbone лучше всего подходи использование глобального префикса.\r\n \r\n**Объектные литералы**\r\n\r\nОбъектные литералы имеют преимущество, не загрязняя глобальное пространство имен, они помогают логически организовать код и параметры. Они полезны, если вы хотите создать легко читаемую структуру, которую можно расширять глубокой вложенностью. В отличии от простых глобальных переменных, для Объектных Литералов часто реализуют проверку на существование переменной, это помогает уменьшить вероятность коллизий. \r\n\r\nПример, демонстрирующий два способа проверки пространства имен на существование переменной, перед ее определением. Я обычно использую вариант 2.\r\n\r\n```javascript\r\n/* Проверка существования myApplication не выполняется */\r\nvar myApplication = {};\r\n \r\n/*\r\nВыполняем проверку. Если переменная уже определена, используем ее.\r\nВариант 1:   if(!myApplication) myApplication = {};\r\nВариант 2:   var myApplication = myApplication || {};\r\n\r\nЗатем мы можем добавить в наш объект возможность сохранения моделей, представлений и коллекций (на самом деле, любых данных):\r\n*/\r\n \r\nvar myApplication = {\r\n    models : {},\r\n    views : {\r\n        pages : {}\r\n    },\r\n    collections : {}\r\n};\r\n```\r\n\r\nКак вариант, можно добавлять свойства глобальному пространству имен (как в этом примере с представлениями):\r\n\r\n```javascript\r\nvar myGalleryViews = myGalleryViews || {};\r\nmyGalleryViews.photoView = Backbone.View.extend({});\r\nmyGalleryViews.galleryView = Backbone.View.extend({});\r\n```\r\n\r\nПреимущества этого шаблона дают вам возможность легко инкапсулировать все ваши модели, представления, маршрутизаторы и т.д, это позволит четко отделить их и будет являться солидной основой для расширения вашего кода.  \r\n\r\nЭтот шаблон хорош многим. Его выбор часто является хорошей идеей для отделения конфигурации по умолчанию вашего приложения в отдельной области, которую легко модифицировать без необходимости поиска отдельных переменных по всему коду. Потенциальный пример объектного литерала, в котором сохраняется конфигурация приложения: \r\n \r\n\r\n```javascript\r\nvar myConfig = {\r\n    language: 'english',\r\n    defaults: {\r\n        enableGeolocation: true,\r\n        enableSharing: false,\r\n        maxPhotos: 20\r\n    },\r\n    theme: {\r\n        skin: 'a',\r\n        toolbars: {\r\n            index: 'ui-navigation-toolbar',\r\n            pages: 'ui-custom-toolbar'    \r\n        }\r\n    }\r\n}\r\n```\r\n\r\nЗаметьте, на самом деле совсем немного синтаксических различий между шаблоном Объектного Литерала и стандартом хранения данных JSON. Если по каким либо причинам вы хотите использовать JSON для сохранения конфигурации (например для простоты хранения при отправке бэк-энду), не стесняйтесь.\r\n<i>пр. перевод.: Объектный литерал (Object Literal), сам по себе не является шаблоном, это синтаксическая конструкция языка программирования</i>\r\n\r\nБольше о шаблоне Объектного Литерала, рекомендую почитать [прекрасную статью](http://blog.rebeccamurphey.com/2009/10/15/using-objects-to-organize-your-code) Rebecca Murphey на эту тему.\r\n\r\n**Вложенные пространства имен**\r\n\r\nРасширение шаблона Объектного Литерала - вложенные пространства имен. Это еще один распространенный шаблон, предлагает низкий вероятность коллизии, основываясь на том факте, что даже если пространство имен верхнего уровня уже существует, оно, вряд ли имеет туже структуру дочерних объектов. Для примера YUI от Yahoo активно использует шаблон вложенных объектов пространства имен: \r\n\r\n```javascript\r\nYAHOO.util.Dom.getElementsByClassName('test');\r\n```\r\n\r\nYUI от Yahoo использует шаблон вложенных объектов пространства имен постоянно, и даже DocumentCloud (создатель Backbone) использует шаблон вложенных пространств имен в своих основных приложения. Простая реализация вложенных пространств имен с использованием Backbone может выглядеть так:\r\n\r\n```javascript\r\nvar galleryApp =  galleryApp || {};\r\n \r\n/*производим простую проверку вложенных дочерних объектов*/\r\ngalleryApp.routers = galleryApp.routers || {};\r\ngalleryApp.model = galleryApp.model || {};\r\ngalleryApp.model.special = galleryApp.model.special || {};\r\n \r\n/*маршрутизаторы*/\r\ngalleryApp.routers.Workspace   = Backbone.Router.extend({}); \r\ngalleryApp.routers.PhotoSearch = Backbone.Router.extend({}); \r\n \r\n/*модели*/\r\ngalleryApp.model.Photo   = Backbone.Model.extend({});\r\ngalleryApp.model.Comment = Backbone.Model.extend({}); \r\n \r\n/*специализированные модели*/\r\ngalleryApp.model.special.Admin = Backbone.Model.extend({});\r\n```\r\n\r\nЭто читаемая и чистая организация является безопасной реализацией пространства имен для вашего Backbone приложения. Возможно это знакомо вам, если вы использовали другие языки программирования. \r\n\r\nЕдинственная оговорка, этот подход заставляет JavaScript движок вашего браузера сначала определить местонахождение объекта galleryApp, и потом копать вглубь до тех пор, пока он не доберется до функции, которые вызываете. В виду этого разработчики, в частности Юрий Зайцев (kangax), провели тестирование производительности шаблона c одним объектом пространства имен против \"вложенного\" подхода, и получили незначительные различия.\r\n\r\n**Рекомендации**\r\n\r\nИз обзора шаблонов пространства имен я предпочитаю для написания Backbone приложений использовать вложенные объекты пространств имен, с шаблоном Объектного Литерала.\r\n\r\nЕдинственная глобальная переменная может работать прекрасно для относительно простых приложении, однако большая кодовая база требует глубокой вложенности подпространств имен в основной области для реализации одновременно читаемого и расширяемого решения задачи. Я чувствую, что такой подход решает обе задачи и является хорошим выбором для разработки с использованием Backbone.\r\n\r\n\r\n###<a name=\"additional-tips\">Дополнительные советы</a>\r\n\r\n####Автоматизированный Backbone Скаффолдинг \r\n\r\nСкаффолдинг может помочь в сокращении времени, необходимом для рождения нового проекта, путем создания базовых, необходимых приложению, файлов в автоматическом режиме. Если вам нравится идея автоматизированного MVC скаффолдинга с использованием Backbone, я счастлив порекомендовать инструмент под названием [Brunch](https://github.com/brunch/brunch).\r\n\r\nОн очень хорошо работает с Backbone, Underscore, jQuery, и CoffeeScript, и даже используется такими компаниями как Red Bull и Jim Bean. Возможно, вам придется обновить некоторые зависимости (новейшую версию jQuery или Zepto) при использовании этого инструмента, в остальном он достаточно стабилен, чтобы использовать его прямо из коробки. \r\n\r\nBrunch можно получить, просто установив его через менеджер пакетов nodejs. Если ваш любимый редактор это Vim или Textmate, вы будете приятно удивлены тем, что для них доступен плагин Brunch. \r\n\r\n####Есть ли ограничение на количество маршрутизаторов? \r\n\r\nAndrew de Andrade отметил, что DocumentCloud для большинства своих проектов обычно использует только один маршрутизатор. Вам, скорее всего не потребуется в ваших приложениях использовать больше одного, двух маршрутизаторов, все маршруты могут быть аккуратно организованны в одном контроллере. \r\n\r\n####Backbone мало для вашего приложения?\r\n\r\nЕсли вы не уверены, действительно ли ваше приложение слишком сложное для использования Backbone, я рекомендую прочитать мою статью о создании больших и масштабируемых приложений на jQuery и JavaScript, или посмотреть мои слайды о вариантах клиентской MVC архитектуры. В обоих вариантах я рассматриваю альтернативные решения, и излагаю свои мысли о пригодности текущего MVC решения для разработки масштабируемых приложений. \r\n\r\nBackbone можно использовать для создания как простых, так и сложных приложений, это демонстрирует большое количество примеров Ashkenas, приведенных в Backbone документации. Как и в любом другом MVC Фреймворке, важно уделить время планированию, какие именно модели и представления вам реально необходимы. Погружение в разработку без выполнения этих шагов может привести к спагетти коду, или к полному рефакторингу в будущем, лучше избегать этих последствий везде, где это возможно.\r\n\r\nВ конце концов, ключ к созданию больших приложений, стараться изначально не строить больших приложений. Если вы обнаружите, что Backbone все-таки вам не вписывается в ваши требования, я в первую очередь рекомендую посмотреть на  JavaScriptMVC или SproutCore, они оба умеют из коробки немного больше, чем Backbone. Dojo и Dojo Mobile также представлять интерес, так как они использовались некоторыми разработчиками для создания достаточно сложных приложений. \r\n\r\n\r\n##<a name=\"advanced\">Расширенная часть</a>\r\n\r\n##<a name=\"restful\">Создание RESTful приложений с Backbone</a>\r\n\r\nВ этой части книги мы переходим к созданию RESTful приложения с использованием Backbone.js и набора современных технологий. Когда взаимодействие с бэк-эндом выполнено на чистом RESTful API, такие операции как получение (GET), создание (POST), обновление (PUT) и удаление (DELETE) моделей выполняются через API Моделей Backbone. Эти API интуитивно понятны, поэтому, реальное изменения хранилища данных с локального (к примеру, localStorage) на базу данных/noSQL хранилище намного проще, чем вы могли подумать.\r\n\r\n\r\n##<a name=\"stack1\">Набор 1: Используем Node.js, Express, Mongoose и MongoDB</a>\r\n\r\nВ первом наборе мы будем рассматривать:\r\n\r\n* [Node.js](nodejs.org)\r\n* [Express](http://expressjs.com/)\r\n* [Mongoose](http://mongoosejs.com/)\r\n* и [MongoDB](http://www.mongodb.org/)\r\n\r\nc [Jade](http://jade-lang.com/) опционально, как движок шаблонизатора (view/templating engine).\r\n\r\n<i>пр. перевод.: советую заглянуть [сюда](http://jsman.ru/)</i>\r\n\t\r\n###Обзор набора\r\n\r\nНе секрет, что node.js это событийно-ориентированная платформа (созданная с исползованием [V8](http://code.google.com/apis/v8/design.html)), разработанная для написания быстрых и расширяемых сетевых приложений. Она легкая, эффективная и отлично подходит для создания приложений реального времени, работающего с большими объемами данных.\r\n\r\nExpress это веб-фреймворк для node.js, вдохновленный [Sinatra](http://www.sinatrarb.com/). Он включает множество полезных возможностей, таких как интуитивные представления, надежную маршрутизацию и фокусируется на производительности.\r\n\t\r\nСледующие по списку MongoDB и Mongoose. MongoDB - документо-ориентированная база данных с открытым исходным кодом, разработанная быть расширяемой и гибкой. В [noSQL](http://ru.wikipedia.org/wiki/NoSQL) базах дынных, вместо того чтобы сохранять информацию в таблицы и строки (то, что мы очень привыкли делать в реляционных базах данных), в Mongo для ее хранения мы будем использовать JSON-подобные документы с использованием динамических схем. Одна из целей Mongo в том, чтобы преодолеть разрыв между хранилищами типа ключ-значение (скорость, масштабируемость) и реляционными базами данных (богатый функционал). \r\n\r\nMongoose - это JavaScript библиотека упрощающая работу с Mongo. Подобно Express, она разрабатывалась для работы в окружении node.js и пытается решить некоторые сложности, связанные с асинхронным сохранением данных, предлагая более удобное API. В нее добавлена поддержка цепочной функциональности <i>(пр. превод.: chaining features)</i>, позволяющей более выразительно работать с нашими данными. \r\n\r\nJade – это шаблонизатор, созданный под впечатлением от Haml (которые мы будем рассматривать позже). Он реализован с использованием JavaScript (также работает с node). Дополнительно поддерживается Express из коробки и имеет ряд полезного функционала, включая поддержку примесей, включений, кэширования, наследования шаблонов и еще много чего. Такие абстракции как Jade не будут использоваться на протяжении всей нашей практики, мы рассмотрим работу, как с ними, так и без них. \r\n\r\n\r\n###Практика\r\n\r\nДля этой практической работы мы в очередной раз займемся улучшением популярного Backbone приложения Todo. Мы изменим это приложение таким образом, чтобы оно сохраняло список дел не в localStorage, а в документо-ориентированном хранилище MongoDB. Код этой практической работы можно посмотреть по следующей ссылке: https://github.com/addyosmani/backbone-boilerplates/tree/master/option2\r\n\r\n\r\n**app.js**\r\n\r\n([Исходный код](https://github.com/addyosmani/backbone-boilerplates/blob/master/option2/app.js))\r\n\r\nПервым делом надо подключить необходимые нашему приложению зависимости. Это Express, Mongoose и Path (модуль, содержащий утилиты для работы с путями файловой системы)\r\n\r\n```javascript\r\nvar application_root = __dirname,\r\n  express = require(\"express\"),\r\n  path = require(\"path\"),\r\n  mongoose = require('mongoose');\r\n```\r\n\r\nДалее создаем экземпляр сервера Express `express.createServer, это простой способ создания экземпляра express.HTTPServer, который мы будем использовать для передачи наших маршрутов. <i>пр. переводчика: для express версии 3.0 устарело</i>\r\n\r\n```javascript\r\nvar app = express.createServer();\r\n```\r\n\r\nAfter this, connect Mongoose up to a database (in our case, localhost should suffice). Should you require the ability to pass in authentication information, here's a sample containing all of the supported URL parameters: `mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]`\r\n\r\n```javascript\r\nmongoose.connect('mongodb://localhost/my_database');\r\n```\r\n\r\nA Mongoose model for any Todo item can now be easily defined by passing a schema instance to `mongoose.model`. In our case the schema covers a Todo item's `text` content, its `done` state and `order` position in the overall Todo list.\r\n\r\n```javascript\r\nvar Todo = mongoose.model('Todo', new mongoose.Schema({\r\n  text: String,\r\n  done: Boolean,\r\n  order: Number\r\n}));\r\n```\r\n\r\nThe `configure()` methods allows us to setup what we need for the current environment with our Express server. Note that lower down in the configuration are two view/view related lines. The last one explicitly sets the viewing/templating engine to be used as Jade `app.set('view engine', 'jade')`. We can avoid these if we wish to use plain HTML/JS for our templates instead.\r\n\r\n```javascript\r\napp.configure(function(){\r\n  // the bodyParser middleware parses JSON request bodies\r\n  app.use(express.bodyParser());\r\n  app.use(express.methodOverride());\r\n  app.use(app.router);\r\n  app.use(express.static(path.join(application_root, \"public\")));\r\n  app.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\r\n  app.set('views', path.join(application_root, \"views\"));\r\n  app.set('view engine', 'jade')\r\n});\r\n\r\n```\r\n\r\nShould you prefer to switch out Jade for an alternative view engine, this can be done fairly trivially. See the section under 'Templating' here:\r\nhttps://github.com/joyent/node/wiki/modules. For example, to switch to EJS, you would simply write `app.set('view engine', 'ejs')`\r\n\r\n\r\nExpress makes use of common HTTP verbs (get, put, post etc.) to provide easy to use, expressive routing API based on CRUD (Create, Read, Update and Delete). Below for example, we can define what happens when the browser requests the root '/'. As a trivial route in this application, it doesn't do anything particularly exciting, however getters typically read or retrieve data.\r\n\r\n```javascript\r\napp.get('/', function(req, res){\r\n  res.send('Hello World');\r\n});\r\n```\r\n\r\nOnto something a little more useful and in our next route, navigating to '/todo' will actually render our Jade view 'todo.jade', as seen in the callback. Additional configuration values can be passed as the second parameter, such as the custom title specified below.\r\n\r\n```javascript\r\napp.get('/todo', function(req, res){\r\n  res.render('todo', {title: \"Our sample application\"});\r\n});\r\n```\r\n\r\nNext, we can see the first of our '/api/' routes. \r\n\r\n```javascript\r\napp.get('/api/todos', function(req, res){\r\n  return Todo.find(function(err, todos) {\r\n    return res.send(todos);\r\n  });\r\n});\r\n```\r\n\r\nThe callback to our next route supports querying for todos based on a specific ID. The route string itself (once compiled) will be converted from '/api/todos/:id' to a regular expression. As you might have guessed, this is a hint that routes can also be regular expression literals if we wished to do something more complex.\r\n\r\n```javascript\r\napp.get('/api/todos/:id', function(req, res){\r\n  return Todo.findById(req.params.id, function(err, todo) {\r\n    if (!err) {\r\n      return res.send(todo);\r\n    }\r\n  });\r\n});\r\n```\r\n\r\nSimilarly, we want to support updating todos based on a specific ID as well. The following allows us to query a todo by ID and then update the values of it's three attributes (text, done, order) easily. \r\n\r\n```javascript\r\napp.put('/api/todos/:id', function(req, res){\r\n  return Todo.findById(req.params.id, function(err, todo) {\r\n    todo.text = req.body.text;\r\n    todo.done = req.body.done;\r\n    todo.order = req.body.order;\r\n    return todo.save(function(err) {\r\n      if (!err) {\r\n        console.log(\"updated\");\r\n      }\r\n      return res.send(todo);\r\n    });\r\n  });\r\n});\r\n```\r\n\r\nWe've so far covered requesting todos and updating them, but a core part of the application requires us to insert (or add) new todos to our data-store. Below we can create new <code>Todo</code> models and simply save them.\r\n\r\n```javascript\r\napp.post('/api/todos', function(req, res){\r\n  var todo;\r\n  todo = new Todo({\r\n    text: req.body.text,\r\n    done: req.body.done,\r\n    order: req.body.order\r\n  });\r\n  todo.save(function(err) {\r\n    if (!err) {\r\n      return console.log(\"created\");\r\n    }\r\n  });\r\n  return res.send(todo);\r\n});\r\n```\r\n\r\nWe of course also want to support deleting todos (e.g if a todo has been 'cleared', it should be deleted). This also works based on a specific todo ID.\r\n\r\n```javascript\r\napp.delete('/api/todos/:id', function(req, res){\r\n  return Todo.findById(req.params.id, function(err, todo) {\r\n    return todo.remove(function(err) {\r\n      if (!err) {\r\n        console.log(\"removed\");\r\n        return res.send('')\r\n      }\r\n    });\r\n  });\r\n});\r\n```\r\n\r\nFinally, this last line is to ensure we're only listening on the port app.js is running.\r\n\r\n```javascript\r\napp.listen(3000);\r\n```\r\n\r\n**script.js - updating our Backbone.js app**\r\n\r\nIn the `/public/js` folder of options 1 (HTML templates) and 2 (Jade) for the practical, you'll find a version of the Backbone Todo app originally by Jerome Gravel-Niquet. Let's pay attention to [script.js](https://github.com/addyosmani/backbone-boilerplates/blob/master/option2/public/js/script.js). In order to change the application to work with our new back-end, we'll need to make some very minor changes to this.\r\n\r\nReviewing `window.TodoList` (a Backbone Collection), you'll notice that it has a property called `localStorage`, which uses the Backbone [localStorage](https://github.com/jeromegn/Backbone.localStorage) adapter in order to facilitate storing data using the browser's localStorage features.\r\n\r\n```javascript\r\nwindow.TodoList = Backbone.Collection.extend({\r\n\r\n    // Reference to this collection's model.\r\n    model: Todo,\r\n\r\n    // Save all of the todo items under the `\"todos\"` namespace.\r\n    // Typically, this should be a unique name within your application\r\n    localStorage: new Store(\"todos\"),\r\n```\r\n\r\nIn order to switch it over to our RESTful backend, we're going to make use of the `url` property or function on a collection to reference its location on the server. Models inside of a collection then use `url` to construct URLs of their own. As all of the CRUD for our RESTful API works on the base route '/api/todos', this is the value we set `url` to.\r\n\r\n```javascript\r\n    // localStorage: new Store(\"todos\"),\r\n    url: '/api/todos',\r\n```\r\n\r\nThis is the only change necessary to our existing Backbone application in order to get things working. Pretty easy, right?\r\n\r\n\r\n\r\n**todo.jade**\r\n\r\nThe Jade templates for our application cover declarative markup for both the index (layout.jade) of the application and the main Todo container (todo.jade). It also covers the script-tag templates used for rendering each new Todo item that's added.\r\n\r\n<pre>\r\n// Todo App Interface\r\n\r\n#todoapp\r\n  .title\r\n    h1 Todos\r\n  .content\r\n    #create-todo\r\n      input#new-todo(placeholder=&quot;What needs to be done?&quot;, type=&quot;text&quot;)\r\n      span.ui-tooltip-top(style=&quot;display:none;&quot;) Press Enter to save this task\r\n    #todos\r\n      ul#todo-list\r\n    #todo-stats\r\n\r\n\r\n// Templates\r\nscript#item-template(type=&quot;text/template&quot;)\r\n  &lt;div class=&quot;todo &lt;%= done ? &#39;done&#39; : &#39;&#39; %&gt;&quot;&gt;\r\n  .display\r\n    &lt;input class=&quot;check&quot; type=&quot;checkbox&quot; &lt;%= done ? &#39;checked=&quot;checked&quot;&#39; : &#39;&#39; %&gt; /&gt;\r\n    .todo-text \r\n    span#todo-destroy\r\n  .edit\r\n    input.todo-input(type=&quot;text&quot;, &quot;value&quot;=&quot;&quot;)\r\n  &lt;/div&gt;\r\n\r\nscript#stats-template(type=&quot;text/template&quot;)\r\n  &lt;% if (total) { %&gt;\r\n  span.todo-count\r\n    span.number &lt;%= remaining %&gt; \r\n    span.word &lt;%= remaining == 1 ? &#39;item&#39; : &#39;items&#39; %&gt;\r\n    |  left.\r\n  &lt;% } %&gt;\r\n  &lt;% if (done) { %&gt;\r\n  span.todo-clear\r\n    a(href=&quot;#&quot;)\r\n      |  Clear\r\n      span.number-done &lt;%= done %&gt;\r\n      |  completed\r\n      span.word-done &lt;%= done == 1 ? &#39;item&#39; : &#39;items&#39; %&gt;\r\n  &lt;% } %&gt;\r\n</pre>\r\n\r\n**layout.jade**\r\n\r\n<pre>\r\n!!! 5\r\n//if lt IE 8\r\n  &lt;html class=&quot;no-js ie6 oldie&quot; lang=&quot;en&quot;&gt; \r\n//if IE 7\r\n  &lt;html class=&quot;no-js ie7 oldie&quot; lang=&quot;en&quot;&gt;\r\n//if IE 8\r\n  &lt;html class=&quot;no-js ie8 oldie&quot; lang=&quot;en&quot;&gt;\r\n//if gt IE 8\r\n  &lt;!--&gt; &lt;html class=&quot;no-js&quot; lang=&quot;en&quot;&gt; &lt;!--\r\nhead\r\n  meta(charset=&quot;utf-8&quot;)\r\n  meta(http-equiv=&quot;X-UA-Compatible&quot;, content=&quot;IE=edge,chrome=1&quot;)\r\n\r\n  title=title\r\n  meta(name=&quot;description&quot;, content=&quot;&quot;)\r\n  meta(name=&quot;author&quot;, content=&quot;&quot;)\r\n  meta(name=&quot;viewport&quot;, content=&quot;width=device-width,initial-scale=1&quot;)\r\n  \r\n  // CSS concatenated and minified via ant build script\r\n  link(rel=&quot;stylesheet&quot;, href=&quot;css/style.css&quot;)\r\n  // end CSS\r\n\r\n  script(src=&quot;js/libs/modernizr-2.0.6.min.js&quot;)\r\nbody\r\n\r\n  #container\r\n    header\r\n    #main(role=&quot;main&quot;)!=body\r\n    footer\r\n  //! end of #container\r\n\r\n  script(src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js&quot;)\r\n  script\r\n    window.jQuery || document.write(&#39;&lt;script src=&quot;js/libs/jquery-1.6.2.min.js&quot;&gt;&lt;\\\\/script&gt;&#39;)\r\n\r\n  // scripts concatenated and minified via ant build script\r\n  script(src=&quot;js/mylibs/underscore.js&quot;)\r\n  script(src=&quot;js/mylibs/backbone.js&quot;)\r\n  script(defer, src=&quot;js/plugins.js&quot;)\r\n  script(defer, src=&quot;js/script.js&quot;)\r\n  // end scripts\r\n\r\n  // Change UA-XXXXX-X to be your site&#39;s ID\r\n  script\r\n    window._gaq = [[&#39;_setAccount&#39;,&#39;UAXXXXXXXX1&#39;],[&#39;_trackPageview&#39;],[&#39;_trackPageLoadTime&#39;]];\r\n    Modernizr.load({load: (&#39;https:&#39; == location.protocol ? &#39;//ssl&#39; : &#39;//www&#39;) + &#39;.google-analytics.com/ga.js&#39;});\r\n\r\n  //if lt IE 7\r\n    script(src=&quot;//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js&quot;)\r\n    script\r\n      window.attachEvent(&#39;onload&#39;,function(){CFInstall.check({mode:&#39;overlay&#39;})})\r\n&lt;/html&gt;\r\n\r\n</pre>\r\n\r\n\r\n**static.html**\r\n\r\nAlternatively, a static version of our index which doesn't rely on Jade can be put together as follows. See [here](https://github.com/addyosmani/backbone-boilerplates/blob/master/option1/public/static.html) for the complete file or below for a sample.\r\n\r\n<pre>\r\n &lt;div id=&quot;container&quot;&gt;\r\n    &lt;div id=&quot;main&quot; role=&quot;main&quot;&gt;\r\n\r\n      &lt;!-- Todo App Interface--&gt;\r\n\r\n      &lt;div id=&quot;todoapp&quot;&gt;\r\n        &lt;div class=&quot;title&quot;&gt;\r\n          &lt;h1&gt;Todos&lt;/h1&gt;\r\n        &lt;/div&gt;\r\n\r\n        &lt;div class=&quot;content&quot;&gt;\r\n          &lt;div id=&quot;create-todo&quot;&gt;\r\n            &lt;input id=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; type=\r\n            &quot;text&quot; /&gt;&lt;span style=&quot;display:none;&quot; class=&quot;ui-tooltip-top&quot;&gt;Press Enter to\r\n            save this task&lt;/span&gt;\r\n          &lt;/div&gt;\r\n\r\n          &lt;div id=&quot;todos&quot;&gt;\r\n            &lt;ul id=&quot;todo-list&quot;&gt;&lt;/ul&gt;\r\n          &lt;/div&gt;\r\n\r\n          &lt;div id=&quot;todo-stats&quot;&gt;&lt;/div&gt;\r\n        &lt;/div&gt;\r\n      &lt;/div&gt;\r\n\r\n\r\n    &lt;!-- Templates--&gt;\r\n\r\n      &lt;script id=&quot;item-template&quot; type=&quot;text/template&quot;&gt;\r\n      &lt;div class=&quot;todo &lt;%= done ? &#39;done&#39; : &#39;&#39; %&gt;&quot;&gt;\r\n      &lt;div class=&quot;display&quot;&gt;&lt;input class=&quot;check&quot; type=&quot;checkbox&quot; &lt;%= done ? &#39;checked=&quot;checked&quot;&#39; : &#39;&#39; %&gt; /&gt;\r\n      &lt;div class=&quot;todo-text&quot;&gt;&lt;/div&gt;&lt;span id=&quot;todo-destroy&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;edit&quot;&gt;&lt;input type=&quot;text&quot; value=&quot;&quot; class=&quot;todo-input&quot;/&gt;&lt;/div&gt;&lt;/div&gt;\r\n      &lt;/script&gt;\r\n\r\n      &lt;script id=&quot;stats-template&quot; type=&quot;text/template&quot;&gt;\r\n      &lt;% if (total) { %&gt;\r\n      &lt;span class=&quot;todo-count&quot;&gt;&lt;span class=&quot;number&quot;&gt;&lt;%= remaining %&gt; &lt;/span&gt;&lt;span class=&quot;word&quot;&gt;&lt;%= remaining == 1 ? &#39;item&#39; : &#39;items&#39; %&gt;&lt;/span&gt; left.\r\n      &lt;/span&gt;&lt;% } %&gt;\r\n      &lt;% if (done) { %&gt;\r\n      &lt;span class=&quot;todo-clear&quot;&gt;&lt;a href=&quot;#&quot;&gt; Clear\r\n      &lt;span class=&quot;number-done&quot;&gt;&lt;%= done %&gt;&lt;/span&gt; completed\r\n      &lt;span class=&quot;word-done&quot;&gt;&lt;%= done == 1 ? &#39;item&#39; : &#39;items&#39; %&gt;&lt;/span&gt;&lt;/a&gt;&lt;/span&gt;&lt;% } %&gt;\r\n      &lt;/script&gt;\r\n\r\n    &lt;/div&gt;\r\n  &lt;/div&gt;\r\n\r\n  &lt;!--! end of #container--&gt;\r\n</pre>\r\n\r\n\r\n### Practical Setup\r\n\r\nWe've now gone through the major points of developing a RESTful backend using Node.js, Express and Mongoose. Next, let's make sure you can get your environment setup to run the updated Todo app.\r\n\r\n####MongoDB\r\n\r\nOnce you've downloaded [MongoDB](http://www.mongodb.org/downloads), you'll need to complete two steps to get it up and running.\r\n\r\n**Data directories**\r\n\r\nMongoDB stores data in the bin/data/db folder but won't actually create this directory for you. Navigate to where you've downloaded and extracted MongoDB and run the following from terminal:\r\n\r\n<pre>\r\nsudo mkdir -p /data/db/\r\nsudo chown `id -u` /data/db\r\n</pre>\r\n\r\n**Running and connecting to your server**\r\n\r\nOnce this is done, open up two terminal windows. \r\n\r\nIn the first, `cd` to your MongoDB bin directory or type in the complete path to it. You'll need to start <cpde>mongod`.\r\n\r\n<pre>\r\n$ ./bin/mongod\r\n</pre>\r\n\r\nNext, in the second terminal, start the `mongo</code shell which will connect up to localhost by default.\r\n\r\n<pre>\r\n$ ./bin/mongo\r\n</pre>\r\n\r\nThat's it!.\r\n\r\n####Express and Mongoose\r\n\r\nOption 1 (HTML) and Option 2 (Jade) of the practical download both come with an install.sh bash script. This allows you to easily install Express, Mongoose, Jade (and optionally MongoDB if you prefer to) through npm (the node package manager). \r\n\r\n* Make sure you have Node.js installed. If not, you can grab it [here](http://nodejs.org/#download)\r\n* Next run `$ ./install.sh` at the terminal to install the rest of our dependencies. To see the exact contents of the install.sh file, see below:\r\n\r\n**install.sh**\r\n\r\n<pre>\r\n#!/bin/bash\r\nnpm install express\r\nnpm install mongodb --mongodb:native\r\nnpm install mongoose\r\nnpm install jade\r\n</pre>\r\n\r\n\r\n* After you've installed all of the dependencies for the stack, we can get to cloning the repo containing our practicals and running them. Start by running the below lines:\r\n   \r\n<pre>\r\ngit clone git://github.com/addyosmani/backbone-boilerplates.git\r\ncd option2\r\nnode app.js\r\n</pre>\r\n\r\nFor option1 (without Jade), simply cd into option1 and run `node app.js` from there.\r\n\r\nFinally, either of the example apps can now be accessed by navigating to:\r\n\r\n* Option 1: `http://localhost:3000/static.html`\r\n* Option 2: `http://localhost:3000/todo`\r\n\r\nThat's it! Whilst there's a lot more than can be done to expand on the concepts covered so far, the base we're reviewed should be enough to get you up and running with this stack if you wish to use them with Backbone. \r\n\r\nIn the next addition to this section (coming soon), we'll take a look at a stack consisting of Ruby, Sinatra, Haml and more.\r\n\r\n\r\n\r\n##<a name=\"modularjs\">Modular JavaScript</a>\r\n\r\nWhen we say an application is modular, we generally mean it's composed of a set of highly decoupled, distinct pieces of functionality stored in modules. As you probably know, loose coupling facilitates easier maintainability of apps by removing dependencies where possible. When this is implemented efficiently, its quite easy to see how changes to one part of a system may affect another.\r\n\r\nUnlike some more traditional programming languages however, the current iteration of JavaScript (ECMA-262) doesn't provide developers with the means to import such modules of code in a clean, organized manner. It's one of the concerns with specifications that haven't required great thought until more recent years where the need for more organized JavaScript applications became apparent.\r\n\r\nInstead, developers at present are left to fall back on variations of the module or object literal patterns. With many of these, module scripts are strung together in the DOM with namespaces being described by a single global object where it's still possible to incur naming collisions in your architecture. There's also no clean way to handle dependency management without some manual effort or third party tools.\r\n\r\nWhilst native solutions to these problems will be arriving in ES Harmony, the good news is that writing modular JavaScript has never been easier and you can start doing it today.\r\n\r\nIn this next part of the book, we're going to look at how to use AMD modules and RequireJS for cleanly wrapping units of code in your application into manageable modules.\r\n\r\n\r\n##Organizing modules with RequireJS and AMD\r\n\r\nIn case you haven't used it before, [RequireJS](http://requirejs.org) is a popular script loader written by James Burke - a developer who has been quite instrumental in helping shape the AMD module format, which we'll discuss more shortly. Some of RequireJS's capabilities include helping to load multiple script files, helping define modules with or without dependencies and loading in non-script dependencies such as text files.\r\n\r\nSo, why use RequireJS with Backbone? Although Backbone is excellent when it comes to providing a sanitary structure to your applications, there are a few key areas where some additional help could be used:\r\n\r\n1) Backbone doesn't endorse a particular approach to modular-development. Although this means it's quite open-ended for developers to opt for classical patterns like the module-pattern or Object Literals for structuring their apps (which both work fine), it also means developers aren't sure of what works best when other concerns come into play, such as dependency management.\r\n\r\nRequireJS is compatible with the AMD (Asynchronous Module Definition) format, a format which was born from a desire to write something better than the 'write lots of script tags with implicit dependencies and manage them manually' approach to development. In addition to allowing you to clearly declare dependencies, AMD works well in the browser, supports string IDs for dependencies, declaring multiple modules in the same file and gives you easy-to-use tools to avoid polluting the global namespace.\r\n\r\n2) Let's discuss dependency management a little more as it can actually be quite challenging to get right if you're doing it by hand. When we write modules in JavaScript, we ideally want to be able to handle the reuse of code units intelligently and sometimes this will mean pulling in other modules at run-time whilst at other times you may want to do this dynamically to avoid a large pay-load when the user first hits your application.\r\n\r\nThink about the GMail web-client for a moment. When users initially load up the page on their first visit, Google can simply hide widgets such as the chat module until a user has indicated (by clicking 'expand') that they wish to use it. Through dynamic dependency loading, Google could load up the chat module only then, rather than forcing all users to load it when the page first initializes. This can improve performance and load times and can definitely prove useful when building larger applications.\r\n\r\nI've previously written [a detailed article](http://addyosmani.com/writing-modular-js) covering both AMD and other module formats and script loaders in case you'd like to explore this topic further. The takeaway is that although it's perfectly fine to develop applications without a script loader or clean module format in place, it can be of significant benefit to consider using these tools in your application development.\r\n\r\n###Writing AMD modules with RequireJS\r\n\r\nAs discussed above, the overall goal for the AMD format is to provide a solution for modular JavaScript that developers can use today. The two key concepts you need to be aware of when using it with a script-loader are a `define()` method for facilitating module definition and a `require()` method for handling dependency loading. `define()` is used to define named or unnamed modules based on the proposal using the following signature:\r\n\r\n```javascript\r\ndefine(\r\n    module_id /*optional*/, \r\n    [dependencies] /*optional*/, \r\n    definition function /*function for instantiating the module or object*/\r\n);\r\n```\r\n\r\nAs you can tell by the inline comments, the `module_id` is an optional argument which is typically only required when non-AMD concatenation tools are being used (there may be some other edge cases where it's useful too). When this argument is left out, we call the module 'anonymous'. When working with anonymous modules, the idea of a module's identity is DRY, making it trivial to avoid duplication of filenames and code.\r\n\r\nBack to the define signature, the dependencies argument represents an array of dependencies which are required by the module you are defining and the third argument ('definition function') is a function that's executed to instantiate your module. A barebone module (compatible with RequireJS) could be defined using `define()` as follows:\r\n\r\n```javascript\r\n// A module ID has been omitted here to make the module anonymous\r\n\r\ndefine(['foo', 'bar'], \r\n    // module definition function\r\n    // dependencies (foo and bar) are mapped to function parameters\r\n    function ( foo, bar ) {\r\n        // return a value that defines the module export\r\n        // (i.e the functionality we want to expose for consumption)\r\n    \r\n        // create your module here\r\n        var myModule = {\r\n            doStuff:function(){\r\n                console.log('Yay! Stuff');\r\n            }\r\n        }\r\n\r\n        return myModule;\r\n});\r\n```\r\n\r\n####Alternate syntax\r\nThere is also a [sugared version](http://requirejs.org/docs/whyamd.html#sugar) of `define()` available that allows you to declare your dependencies as local variables using `require()`. This will feel familiar to anyone who's used node, and can be easier to add or remove dependencies.\r\nHere is the previous snippet using the alternate syntax:\r\n\r\n```javascript\r\n// A module ID has been omitted here to make the module anonymous\r\n\r\ndefine(function(require){\r\n        // module definition function\r\n    // dependencies (foo and bar) are defined as local vars\r\n    var foo = require('foo'),\r\n        bar = require('bar');\r\n        \r\n        // return a value that defines the module export\r\n        // (i.e the functionality we want to expose for consumption)\r\n    \r\n        // create your module here\r\n        var myModule = {\r\n            doStuff:function(){\r\n                console.log('Yay! Stuff');\r\n            }\r\n        }\r\n\r\n        return myModule;\r\n});\r\n```\r\n\r\nThe `require()` method is typically used to load code in a top-level JavaScript file or within a module should you wish to dynamically fetch dependencies. An example of its usage is:\r\n\r\n```javascript\r\n// Consider 'foo' and 'bar' are two external modules\r\n// In this example, the 'exports' from the two modules loaded are passed as\r\n// function arguments to the callback (foo and bar)\r\n// so that they can similarly be accessed\r\n\r\nrequire(['foo', 'bar'], function ( foo, bar ) {\r\n        // rest of your code here\r\n        foo.doSomething();\r\n});\r\n```\r\n\r\n\r\n**Wrapping modules, views and other components with AMD**\r\n\r\nNow that we've taken a look at how to define AMD modules, let's review how to go about wrapping components like views and collections so that they can also be easily loaded as dependencies for any parts of your application that require them. At it's simplest, a Backbone model may just require Backbone and Underscore.js. These are considered it's dependencies and so, to write an AMD model module, we would simply do this:\r\n\r\n```javascript\r\ndefine(['underscore', 'backbone'], function(_, Backbone) {\r\n  var myModel = Backbone.Model.extend({\r\n\r\n    // Default attributes \r\n    defaults: {\r\n      content: \"hello world\",\r\n    },\r\n\r\n    // A dummy initialization method\r\n    initialize: function() {\r\n      if (!this.get(\"content\")) {\r\n        this.set({\"content\": this.defaults.content});\r\n      }\r\n    },\r\n\r\n    clear: function() {\r\n      this.destroy();\r\n      this.view.remove();\r\n    }\r\n\r\n  });\r\n  return myModel;\r\n});\r\n```\r\n\r\nNote how we alias Underscore.js's instance to `_` and Backbone to just `Backbone`, making it very trivial to convert non-AMD code over to using this module format. For a view which might require other dependencies such as jQuery, this can similarly be done as follows:\r\n\r\n```javascript\r\ndefine([\r\n  'jquery',\r\n  'underscore', \r\n  'backbone',\r\n  'collections/mycollection',\r\n  'views/myview'\r\n  ], function($, _, Backbone, myCollection, myView){\r\n\r\n  var AppView = Backbone.View.extend({\r\n  ...\r\n```\r\n\r\nAliasing to the dollar-sign (`$`), once again makes it very easy to encapsulate any part of an application you wish using AMD.\r\n\r\n\r\n##External [Underscore/Handlebars/Mustache] templates using RequireJS\r\n\r\nMoving your [Underscore/Mustache/Handlebars] templates to external files is actually quite straight-forward. As this application makes use of RequireJS, I'll discuss how to implement external templates using this specific script loader.\r\n\r\nRequireJS has a special plugin called text.js which is used to load in text file dependencies. To use the text plugin, simply follow these simple steps:\r\n\r\n1. Download the plugin from http://requirejs.org/docs/download.html#text and place it in either the same directory as your application's main JS file or a suitable sub-directory.\r\n\r\n2. Next, include the text.js plugin in your initial RequireJS configuration options. In the code snippet below, we assume that RequireJS is being included in our page prior to this code snippet being executed. Any of the other scripts being loaded are just there for the sake of example.\r\n \r\n```javascript\r\nrequire.config( {\r\n    paths: {\r\n        'backbone':         'libs/AMDbackbone-0.5.3',\r\n        'underscore':       'libs/underscore-1.2.2',\r\n        'text':             'libs/require/text',\r\n        'jquery':           'libs/jQuery-1.7.1',\r\n        'json2':            'libs/json2',\r\n        'datepicker':       'libs/jQuery.ui.datepicker',\r\n        'datepickermobile': 'libs/jquery.ui.datepicker.mobile',\r\n        'jquerymobile':     'libs/jquery.mobile-1.0'\r\n    },\r\n    baseUrl: 'app'\r\n} );\r\n```\r\n\r\n3. When the `text!` prefix is used for a dependency, RequireJS will automatically load the text plugin and treat the dependency as a text resource. A typical example of this in action may look like..\r\n\r\n```javascript\r\nrequire(['js/app', 'text!templates/mainView.html'],\r\n    function(app, mainView){\r\n        // the contents of the mainView file will be\r\n        // loaded into mainView for usage.\r\n    }\r\n);\r\n```\r\n\r\n4. Finally we can use the text resource that's been loaded for templating purposes. You're probably used to storing your HTML templates inline using a script with a specific identifier.\r\n\r\nWith Underscore.js's micro-templating (and jQuery) this would typically be:\r\n\r\nHTML:\r\n\r\n```html\r\n<script type=\"text/template\" id=\"mainViewTemplate\">\r\n    <% _.each( person, function( person_item ){ %>\r\n        <li><%= person_item.get(\"name\") %></li>  \r\n    <% }); %>\r\n</script>\r\n```\r\n\r\nJS:\r\n\r\n```javascript\r\nvar compiled_template = _.template( $('#mainViewTemplate').html() );\r\n```\r\n\r\nWith RequireJS and the text plugin however, it's as simple as saving your template into an external text file (say, `mainView.html`) and doing the following:\r\n\r\n```javascript\r\nrequire(['js/app', 'text!templates/mainView.html'],\r\n    function(app, mainView){\r\n        \r\n        var compiled_template = _.template( mainView );\r\n    }\r\n);\r\n```\r\n\r\nThat's it!. You can then go applying your template to a view in Backbone doing something like:\r\n\r\n```javascript\r\ncollection.someview.el.html( compiled_template( { results: collection.models } ) );\r\n```\r\n\r\n\r\nAll templating solutions will have their own custom methods for handling template compilation, but if you understand the above, substituting Underscore's micro-templating for any other solution should be fairly trivial.\r\n\r\n**Note:** You may also be interested in looking at [Require.js tpl](https://github.com/ZeeAgency/requirejs-tpl). It's an AMD-compatible version of the Underscore templating system that also includes support for optimization (pre-compiled templates) which can lead to better performance and no evals. I have yet to use it myself, but it comes as a recommended resource.\r\n\r\n\r\n##Optimizing Backbone apps for production with the RequireJS Optimizer\r\n\r\nAs experienced developers may know, an essential final step when writing both small and large JavaScript web applications is the build process.  The majority of non-trivial apps are likely to consist of more than one or two scripts and so optimizing, minimizing and concatenating your scripts prior to pushing them to production will require your users to download a reduced number (if not just one) script file.\r\n\r\nNote: If you haven't looked at build processes before and this is your first time hearing about them, you might find [my post and screencast on this topic](http://addyosmani.com/blog/client-side-build-process/) useful.\r\n\r\nWith some other structural JavaScript frameworks, my recommendation would normally be to implicitly use YUI Compressor or Google's closure compiler tools, but we have a slightly more elegant method available, when it comes to Backbone if you're using RequireJS. RequireJS has a command line optimization tool called r.js which has a number of capabilities, including:\r\n\r\n* Concatenating specific scripts and minifying them using external tools such as UglifyJS (which is used by default) or Google's Closure Compiler for optimal browser delivery, whilst preserving the ability to dynamically load modules\r\n* Optimizing CSS and stylesheets by inlining CSS files imported using @import, stripping out comments etc.\r\n* The ability to run AMD projects in both Node and Rhino (more on this later)\r\n\r\nYou'll notice that I mentioned the word 'specific' in the first bullet point. The RequireJS optimizer only concatenates module scripts that have been specified in arrays of string literals passed to top-level (i.e non-local) require and define calls. As clarified by the [optimizer docs](http://requirejs.org/docs/optimization.html) this means that Backbone modules defined like this:\r\n\r\n```javascript\r\ndefine(['jquery','backbone','underscore', 'collections/sample','views/test'], \r\n    function($,Backbone, _, Sample, Test){\r\n        //...\r\n    });\r\n```\r\n\r\nwill combine fine, however inline dependencies such as:\r\n\r\n```javascript\r\nvar models = someCondition ? ['models/ab','models/ac'] : ['models/ba','models/bc'];\r\n```\r\n\r\nwill be ignored. This is by design as it ensures that dynamic dependency/module loading can still take place even after optimization. \r\n\r\nAlthough the RequireJS optimizer works fine in both Node and Java environments, it's strongly recommended to run it under Node as it executes significantly faster there. In my experience, it's a piece of cake to get setup with either environment, so go for whichever you feel most comfortable with. \r\n\r\nTo get started with r.js, grab it from the [RequireJS download page](http://requirejs.org/docs/download.html#rjs) or [through NPM](http://requirejs.org/docs/optimization.html#download). Now, the RequireJS optimizer works absolutely fine for single script and CSS files, but for most cases you'll want to actually optimize an entire Backbone project. You *could* do this completely from the command-line, but a cleaner option is using build profiles.\r\n\r\nBelow is an example of a build file taken from the modular jQuery Mobile app referenced later in this book. A **build profile** (commonly named `app.build.js`) informs RequireJS to copy all of the content of `appDir` to a directory defined by `dir` (in this case `../release`). This will apply all of the necessary optimizations inside the release folder. The `baseUrl` is used to resolve the paths for your modules. It should ideally be relative to `appDir`.\r\n\r\nNear the bottom of this sample file, you'll see an array called `modules`. This is where you specify the module names you wish to have optimized. In this case we're optimizing the main application called 'app', which maps to `appDir/app.js`. If we had set the `baseUrl` to 'scripts', it would be mapped to `appDir/scripts/app.js`.\r\n\r\n```javascript\r\n({\r\n    appDir: \"./\",\r\n    baseUrl: \"./\",\r\n    dir: \"../release\",\r\n    paths: {\r\n       'backbone':          'libs/AMDbackbone-0.5.3',\r\n        'underscore':       'libs/underscore-1.2.2',\r\n        'jquery':           'libs/jQuery-1.7.1',\r\n        'json2':            'libs/json2',\r\n        'datepicker':       'libs/jQuery.ui.datepicker',\r\n        'datepickermobile': 'libs/jquery.ui.datepicker.mobile',\r\n        'jquerymobile':     'libs/jquery.mobile-1.0'\r\n    },\r\n    optimize: \"uglify\",\r\n    modules: [\r\n        {\r\n            name: \"app\",\r\n            exclude: [\r\n                // If you prefer not to include certain libs exclude them here\r\n            ]\r\n        }\r\n    ]\r\n})\r\n```\r\n\r\nThe way the build system in r.js works is that it traverses app.js (whatever modules you've passed) and resolved dependencies, concatenating them into the final `release`(dir) folder. CSS is treated the same way.\r\n\r\nThe build profile is usually placed inside the 'scripts' or 'js' directory of your project. As per the docs, this file can however exist anywhere you wish, but you'll need to edit the contents of your build profile accordingly. \r\n\r\nFinally, to run the build, execute the following command once inside your `appDir` or `appDir/scripts` directory:\r\n\r\n```javascript\r\nnode ../../r.js -o app.build.js\r\n```\r\n\r\nThat's it. As long as you have UglifyJS/Closure tools setup correctly, r.js should be able to easily optimize your entire Backbone project in just a few key-strokes. If you would like to learn more about build profiles, James Burke has a [heavily commented sample file](https://github.com/jrburke/r.js/blob/master/build/example.build.js) with all the possible options available.\r\n\r\n\r\n##[Practical: Building a modular Backbone Todo app with AMD & RequireJS](#practical_modularapp)\r\n\r\nIn this chapter, we'll look at our first practical Backbone & RequireJS project - how to build a modular Todo application. The application will allow us to add new todos, edit new todos and clear todo items that have been marked as completed. For a more advanced practical, see the section on mobile Backbone development.\r\n\r\nThe complete code for the application can can be found in the `practicals/modular-todo-app` folder of this repo (thanks to Thomas Davis and J&eacute;r&ocirc;me Gravel-Niquet). Alternatively grab a copy of my side-project [TodoMVC](https://github.com/addyosmani/todomvc) which contains the sources to both AMD and non-AMD versions.\r\n\r\n**Note:** Thomas may be covering a practical on this exercise in more detail on [backbonetutorials.com](http://backbonetutorials.com) at some point soon, but for this section I'll be covering what I consider the core concepts.\r\n\r\n###Overview\r\n\r\nWriting a 'modular' Backbone application can be a straight-forward process. There are however, some key conceptual differences to be aware of if opting to use AMD as your module format of choice:\r\n\r\n* As AMD isn't a standard native to JavaScript or the browser, it's necessary to use a script loader (such as RequireJS or curl.js) in order to support defining components and modules using this module format. As we've already reviewed, there are a number of advantages to using the AMD as well as RequireJS to assist here.\r\n* Models, views, controllers and routers need to be encapsulated *using* the AMD-format. This allows each component of our Backbone application to cleanly manage dependencies (e.g collections required by a view) in the same way that AMD allows non-Backbone modules to.\r\n* Non-Backbone components/modules (such as utilities or application helpers) can also be encapsulated using AMD. I encourage you to try developing these modules in such a way that they can both be used and tested independent of your Backbone code as this will increase their ability to be re-used elsewhere.\r\n\r\nNow that we've reviewed the basics, let's take a look at developing our application. For reference, the structure of our app is as follows:\r\n\r\n<pre>\r\nindex.html\r\n...js/\r\n    main.js\r\n    .../models\r\n            todo.js\r\n    .../views\r\n            app.js\r\n            todos.js\r\n    .../collections\r\n            todos.js\r\n    .../templates\r\n            stats.html\r\n            todos.html\r\n    ../libs\r\n        .../backbone\r\n        .../jquery\r\n        .../underscore\r\n        .../require\r\n                require.js\r\n                text.js\r\n...css/\r\n</pre>\r\n\r\n###Markup\r\n\r\nThe markup for the application is relatively simple and consists of three primary parts: an input section for entering new todo items (`create-todo`), a list section to display existing items (which can also be edited in-place) (`todo-list`) and finally a section summarizing how many items are left to be completed (`todo-stats`).\r\n\r\n<pre>\r\n&lt;div id=&quot;todoapp&quot;&gt;\r\n\r\n      &lt;div class=&quot;content&quot;&gt;\r\n\r\n        &lt;div id=&quot;create-todo&quot;&gt;\r\n          &lt;input id=&quot;new-todo&quot; placeholder=&quot;What needs to be done?&quot; type=&quot;text&quot; /&gt;\r\n          &lt;span class=&quot;ui-tooltip-top&quot;&gt;Press Enter to save this task&lt;/span&gt;\r\n        &lt;/div&gt;\r\n\r\n        &lt;div id=&quot;todos&quot;&gt;\r\n          &lt;ul id=&quot;todo-list&quot;&gt;&lt;/ul&gt;\r\n        &lt;/div&gt;\r\n\r\n        &lt;div id=&quot;todo-stats&quot;&gt;&lt;/div&gt;\r\n\r\n      &lt;/div&gt;\r\n\r\n&lt;/div&gt;\r\n</pre>\r\n\r\nThe rest of the tutorial will now focus on the JavaScript side of the practical.\r\n\r\n###Configuration options\r\n\r\nIf you've read the earlier chapter on AMD, you may have noticed that explicitly needing to define each dependency a Backbone module (view, collection or other module) may require with it can get a little tedious. This can however be improved.\r\n\r\nIn order to simplify referencing common paths the modules in our application may use, we use a RequireJS [configuration object](http://requirejs.org/docs/api.html#config), which is typically defined as a top-level script file. Configuration objects have a number of useful capabilities, the most useful being mode name-mapping. Name-maps are basically a key:value pair, where the key defines the alias you wish to use for a path and the value represents the true location of the path.\r\n\r\nIn the code-sample below, you can see some typical examples of common name-maps which include: `backbone`, `underscore`, `jquery` and depending on your choice, the RequireJS `text` plugin, which assists with loading text assets like templates.\r\n\r\n**main.js**\r\n\r\n```javascript\r\nrequire.config({\r\n  baseUrl:'../',\r\n  paths: {\r\n    jquery: 'libs/jquery/jquery-min',\r\n    underscore: 'libs/underscore/underscore-min',\r\n    backbone: 'libs/backbone/backbone-optamd3-min',\r\n    text: 'libs/require/text'\r\n  }\r\n});\r\n\r\nrequire(['views/app'], function(AppView){\r\n  var app_view = new AppView;\r\n});\r\n```\r\n\r\nThe `require()` at the end of our main.js file is simply there so we can load and instantiation the primary view for our application (`views/app.js`). You'll commonly see both this and the configuration object included the most top-level script file for a project.\r\n\r\nIn addition to offering name-mapping, the configuration object can be used to define additional properties such as `waitSeconds` - the number of seconds to wait before script loading times out and `locale`, should you wish to load up i18n bundles for custom languages. The `baseUrl` is simply the path to use for module lookups.\r\n\r\nFor more information on configuration objects, please feel free to check out the excellent guide to them in the [RequireJS docs](http://requirejs.org/docs/api.html#config).\r\n\r\n\r\n###Modularizing our models, views and collections\r\n\r\nBefore we dive into AMD-wrapped versions of our Backbone components, let's review a sample of a non-AMD view. The following view listens for changes to its model (a Todo item) and re-renders if a user edits the value of the item.   \r\n\r\n```javascript\r\nvar TodoView = Backbone.View.extend({\r\n\r\n    //... is a list tag.\r\n    tagName:  \"li\",\r\n\r\n    // Cache the template function for a single item.\r\n    template: _.template($('#item-template').html()),\r\n\r\n    // The DOM events specific to an item.\r\n    events: {\r\n      \"click .check\"              : \"toggleDone\",\r\n      \"dblclick div.todo-content\" : \"edit\",\r\n      \"click span.todo-destroy\"   : \"clear\",\r\n      \"keypress .todo-input\"      : \"updateOnEnter\"\r\n    },\r\n\r\n    // The TodoView listens for changes to its model, re-rendering. Since there's\r\n    // a one-to-one correspondence between a **Todo** and a **TodoView** in this\r\n    // app, we set a direct reference on the model for convenience.\r\n    initialize: function() {      \r\n      this.model.bind('change', this.render, this);\r\n      this.model.view = this;\r\n    },\r\n    ...\r\n```\r\n\r\nNote how for templating the common practice of referencing a script by an ID (or other selector) and obtaining its value is used. This of course requires that the template being accessed is implicitly defined in our markup. The following is the 'embedded' version of our template being referenced above:\r\n\r\n<pre>\r\n&lt;script type=&quot;text/template&quot; id=&quot;item-template&quot;&gt;\r\n      &lt;div class=&quot;todo &lt;%= done ? &#39;done&#39; : &#39;&#39; %&gt;&quot;&gt;\r\n        &lt;div class=&quot;display&quot;&gt;\r\n          &lt;input class=&quot;check&quot; type=&quot;checkbox&quot; &lt;%= done ? &#39;checked=&quot;checked&quot;&#39; : &#39;&#39; %&gt; /&gt;\r\n          &lt;div class=&quot;todo-content&quot;&gt;&lt;/div&gt;\r\n          &lt;span class=&quot;todo-destroy&quot;&gt;&lt;/span&gt;\r\n        &lt;/div&gt;\r\n        &lt;div class=&quot;edit&quot;&gt;\r\n          &lt;input class=&quot;todo-input&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;\r\n        &lt;/div&gt;\r\n      &lt;/div&gt;\r\n&lt;/script&gt;\r\n</pre>\r\n\r\nWhilst there is nothing wrong with the template itself, once we begin to develop larger applications requiring multiple templates, including them all in our markup on page-load can quickly become both unmanageable and come with performance costs. We'll look at solving this problem in a minute.\r\n\r\nLet's now take a look at the AMD-version of our view. As discussed earlier, the 'module' is wrapped using AMD's `define()` which allows us to specify the dependencies our view requires. Using the mapped paths to 'jquery' etc. simplifies referencing common dependencies and instances of dependencies are themselves mapped to local variables that we can access (e.g 'jquery' is mapped to `$`).\r\n\r\n**views/todos.js**\r\n\r\n```javascript\r\ndefine([\r\n  'jquery', \r\n  'underscore', \r\n  'backbone',\r\n  'text!templates/todos.html'\r\n  ], function($, _, Backbone, todosTemplate){\r\n  var TodoView = Backbone.View.extend({\r\n\r\n    //... is a list tag.\r\n    tagName:  \"li\",\r\n\r\n    // Cache the template function for a single item.\r\n    template: _.template(todosTemplate),\r\n\r\n    // The DOM events specific to an item.\r\n    events: {\r\n      \"click .check\"              : \"toggleDone\",\r\n      \"dblclick div.todo-content\" : \"edit\",\r\n      \"click span.todo-destroy\"   : \"clear\",\r\n      \"keypress .todo-input\"      : \"updateOnEnter\"\r\n    },\r\n\r\n    // The TodoView listens for changes to its model, re-rendering. Since there's\r\n    // a one-to-one correspondence between a **Todo** and a **TodoView** in this\r\n    // app, we set a direct reference on the model for convenience.\r\n    initialize: function() {      \r\n      this.model.bind('change', this.render, this);\r\n      this.model.view = this;\r\n    },\r\n\r\n    // Re-render the contents of the todo item.\r\n    render: function() {\r\n      $(this.el).html(this.template(this.model.toJSON()));\r\n      this.setContent();\r\n      return this;\r\n    },\r\n\r\n    // Use `jQuery.text` to set the contents of the todo item.\r\n    setContent: function() {\r\n      var content = this.model.get('content');\r\n      this.$('.todo-content').text(content);\r\n      this.input = this.$('.todo-input');\r\n      this.input.bind('blur', this.close);\r\n      this.input.val(content);\r\n    },\r\n    ...\r\n```\r\n\r\n From a maintenance perspective, there's nothing logically different in this version of our view, except for how we approach templating. \r\n\r\nUsing the RequireJS text plugin (the dependency marked `text`), we can actually store all of the contents for the template we looked at earlier in an external file (todos.html).\r\n\r\n**templates/todos.html**\r\n\r\n<pre>\r\n&lt;div class=&quot;todo &lt;%= done ? &#39;done&#39; : &#39;&#39; %&gt;&quot;&gt;\r\n    &lt;div class=&quot;display&quot;&gt;\r\n      &lt;input class=&quot;check&quot; type=&quot;checkbox&quot; &lt;%= done ? &#39;checked=&quot;checked&quot;&#39; : &#39;&#39; %&gt; /&gt;\r\n      &lt;div class=&quot;todo-content&quot;&gt;&lt;/div&gt;\r\n      &lt;span class=&quot;todo-destroy&quot;&gt;&lt;/span&gt;\r\n    &lt;/div&gt;\r\n    &lt;div class=&quot;edit&quot;&gt;\r\n      &lt;input class=&quot;todo-input&quot; type=&quot;text&quot; value=&quot;&quot; /&gt;\r\n    &lt;/div&gt;\r\n&lt;/div&gt;\r\n</pre>\r\n\r\nThere's no longer a need to be concerned with IDs for the template as we can map it's contents to a local variable (in this case `todosTemplate`). We then simply pass this to the Underscore.js templating function `_.template()` the same way we normally would have the value of our template script.\r\n\r\nNext, let's look at how to define models as dependencies which can be pulled into collections. Here's an AMD-compatible model module, which has two default values: a `content` attribute for the content of a Todo item and a boolean `done` state, allowing us to trigger whether the item has been completed or not.\r\n\r\n**models/todo.js**\r\n\r\n```javascript\r\ndefine(['underscore', 'backbone'], function(_, Backbone) {\r\n  var TodoModel = Backbone.Model.extend({\r\n\r\n    // Default attributes for the todo.\r\n    defaults: {\r\n      content: \"empty todo...\",\r\n      done: false\r\n    },\r\n\r\n    // Ensure that each todo created has `content`.\r\n    initialize: function() {\r\n      if (!this.get(\"content\")) {\r\n        this.set({\"content\": this.defaults.content});\r\n      }\r\n    },\r\n\r\n    // Toggle the `done` state of this todo item.\r\n    toggle: function() {\r\n      this.save({done: !this.get(\"done\")});\r\n    },\r\n\r\n    // Remove this Todo from *localStorage* and delete its view.\r\n    clear: function() {\r\n      this.destroy();\r\n      this.view.remove();\r\n    }\r\n\r\n  });\r\n  return TodoModel;\r\n});\r\n```\r\n\r\nAs per other types of dependencies, we can easily map our model module to a local variable (in this case `Todo`) so it can be referenced as the model to use for our `TodosCollection`. This collection also supports a simple `done()` filter for narrowing down Todo items that have been completed and a `remaining()` filter for those that are still outstanding.\r\n\r\n**collections/todos.js**\r\n\r\n```javascript\r\ndefine([\r\n  'underscore', \r\n  'backbone', \r\n  'libs/backbone/localstorage', \r\n  'models/todo'\r\n  ], function(_, Backbone, Store, Todo){\r\n\r\n    var TodosCollection = Backbone.Collection.extend({\r\n\r\n    // Reference to this collection's model.\r\n    model: Todo,\r\n\r\n    // Save all of the todo items under the `\"todos\"` namespace.\r\n    localStorage: new Store(\"todos\"),\r\n\r\n    // Filter down the list of all todo items that are finished.\r\n    done: function() {\r\n      return this.filter(function(todo){ return todo.get('done'); });\r\n    },\r\n\r\n    // Filter down the list to only todo items that are still not finished.\r\n    remaining: function() {\r\n      return this.without.apply(this, this.done());\r\n    },\r\n    ...\r\n```\r\n\r\nIn addition to allowing users to add new Todo items from views (which we then insert as models in a collection), we ideally also want to be able to display how many items have been completed and how many are remaining. We've already defined filters that can provide us this information in the above collection, so let's use them in our main application view.\r\n\r\n**views/app.js**\r\n\r\n```javascript\r\ndefine([\r\n  'jquery',\r\n  'underscore', \r\n  'backbone',\r\n  'collections/todos',\r\n  'views/todos',\r\n  'text!templates/stats.html'\r\n  ], function($, _, Backbone, Todos, TodoView, statsTemplate){\r\n\r\n  var AppView = Backbone.View.extend({\r\n\r\n    // Instead of generating a new element, bind to the existing skeleton of\r\n    // the App already present in the HTML.\r\n    el: $(\"#todoapp\"),\r\n\r\n    // Our template for the line of statistics at the bottom of the app.\r\n    statsTemplate: _.template(statsTemplate),\r\n\r\n    // ...events, initialize() etc. can be seen in the complete file\r\n\r\n    // Re-rendering the App just means refreshing the statistics -- the rest\r\n    // of the app doesn't change.\r\n    render: function() {\r\n      var done = Todos.done().length;\r\n      this.$('#todo-stats').html(this.statsTemplate({\r\n        total:      Todos.length,\r\n        done:       Todos.done().length,\r\n        remaining:  Todos.remaining().length\r\n      }));\r\n    },\r\n    ...\r\n```\r\n\r\nAbove, we map the second template for this project, `templates/stats.html` to `statsTemplate` which is used for rendering the overall `done` and `remaining` states. This works by simply passing our template the length of our overall Todos collection (`Todos.length` - the number of Todo items created so far) and similarly the length (counts) for items that have been completed (`Todos.done().length`) or are remaining (`Todos.remaining().length`).\r\n\r\nThe contents of our `statsTemplate` can be seen below. It's nothing too complicated, but does use ternary conditions to evaluate whether we should state there's \"1 item\" or \"2 item<i>s</i>\" in a particular state.\r\n\r\n<pre>\r\n &lt;% if (total) { %&gt;\r\n        &lt;span class=&quot;todo-count&quot;&gt;\r\n          &lt;span class=&quot;number&quot;&gt;&lt;%= remaining %&gt;&lt;/span&gt;\r\n          &lt;span class=&quot;word&quot;&gt;&lt;%= remaining == 1 ? &#39;item&#39; : &#39;items&#39; %&gt;&lt;/span&gt; left.\r\n        &lt;/span&gt;\r\n      &lt;% } %&gt;\r\n      &lt;% if (done) { %&gt;\r\n        &lt;span class=&quot;todo-clear&quot;&gt;\r\n          &lt;a href=&quot;#&quot;&gt;\r\n            Clear &lt;span class=&quot;number-done&quot;&gt;&lt;%= done %&gt;&lt;/span&gt;\r\n            completed &lt;span class=&quot;word-done&quot;&gt;&lt;%= done == 1 ? &#39;item&#39; : &#39;items&#39; %&gt;&lt;/span&gt;\r\n          &lt;/a&gt;\r\n        &lt;/span&gt;\r\n      &lt;% } %&gt;\r\n</pre>\r\n\r\n\r\n\r\nThe rest of the source for the Todo app mainly consists of code for handling user and application events, but that rounds up most of the core concepts for this practical. \r\n\r\nTo see how everything ties together, feel free to grab the source by cloning this repo or browse it [online](https://github.com/addyosmani/backbone-fundamentals/tree/master/practicals/modular-todo-app) to learn more. I hope you find it helpful!.\r\n\r\n**Note:** While this first practical doesn't use a build profile as outlined in the chapter on using the RequireJS optimizer, we will be using one in the section on building mobile Backbone applications.\r\n\r\n\r\n##Decoupling Backbone with the Mediator and Facade patterns\r\n\r\nIn this section we'll discuss applying some of the concepts I cover in my article on [Large-scale JavaScript Application development](http://addyosmani.com/largescalejavascript) to Backbone. \r\n\r\n### Summary\r\n\r\nAt a high-level, one architecture that works for such applications is something which is:\r\n\r\n* **Highly decoupled**: encouraging modules to only publish and subscribe to events of interest rather than directly communicating with each other. This helps us to build applications who's units of code aren't highly tied (coupled) together and can thus be reused more easily.\r\n* **Supports module-level security**: whereby modules are only able to execute behavior they've been permitted to. Application security is an area which is often overlooked in JavaScript applications, but can be quite easily implemented in a flexible manner.\r\n* **Supports failover**: allowing an application continuing to function even if particular modules fail. The typical example I give of this is the GMail chat widget. Imagine being able to build applications in a way that if one widget on the page fails (e.g chat), the rest of your application (mail) can continue to function without being affected.\r\n\r\nThis is an architecture which has been implemented by a number of different companies in the past, including Yahoo! (for their modularized homepage - which Nicholas Zakas has [spoken](http://www.youtube.com/watch?v=vXjVFPosQHw) about) and AOL for some of our upcoming projects. \r\n\r\nThe three design patterns that make this architecture possible are the:\r\n\r\n* **Module pattern**: used for encapsulating unique blocks of code, where functions and variables can be kept either public or private. ('private' in the simulation of privacy sense, as of course don't have true privacy in JavaScript)\r\n* **Mediator pattern**: used when the communication between modules may be complex, but is still well defined. If it appears a system may have too many relationships between modules in your code, it may be time to have a central point of control, which is where the pattern fits in.\r\n* **Facade pattern**: used for providing a convenient higher-level interface to a larger body of code, hiding its true underlying complexity\r\n\r\nTheir specific roles in this architecture can be found below.\r\n\r\n* **Modules**: There are almost two concepts of what defines a module. As AMD is being used as a module wrapper, technically each model, view and collection can be considered a module. We then have the concept of modules being distinct blocks of code outside of just MVC/MV*. For the latter, these types of 'modules' are primarily concerned with broadcasting and subscribing to events of interest rather than directly communicating with each other.They are made possible through the Mediator pattern.\r\n* **Mediator**: The mediator has a varying role depending on just how you wish to implement it. In my article, I mention using it as a module manager with the ability to start and stop modules at will, however when it comes to Backbone, I feel that simplifying it down to the role of a central 'controller' that provides pub/sub capabilities should suffice. One can of course go all out in terms of building a module system that supports module starting, stopping, pausing etc, however the scope of this is outside of this chapter.\r\n* **Facade**: This acts as a secure middle-layer that both abstracts an application core (Mediator) and relays messages from the modules back to the Mediator so they don't touch it directly. The Facade also performs the duty of application security guard; it checks event notifications from modules against a configuration (permissions.js, which we will look at later) to ensure requests from modules are only processed if they are permitted to execute the behavior passed.\r\n\r\nFor ease of reference, I sometimes refer to these three patterns grouped together as Aura (a word that means subtle, luminous light).\r\n\r\n### Practical\r\n\r\nFor the practical section of this chapter, we'll be extending the well-known Backbone Todo application using the three patterns mentioned above. The complete code for this section can be found here: https://github.com/addyosmani/backbone-aura and should ideally be run on at minimum, a local HTTP server.\r\n\r\nThe application is broken down into AMD modules that cover everything from Backbone models through to application-level modules. The views publish events of interest to the rest of the application and modules can then subscribe to these event notifications. \r\n\r\nAll subscriptions from modules go through a facade (or sandbox). What this does is check against the subscriber name and the 'channel/notification' it's attempting to subscribe to. If a channel *doesn't* have permissions to be subscribed to (something established through permissions.js), the subscription isn't permitted. \r\n\r\n\r\n**Mediator**\r\n\r\nFound in `aura/mediator.js`\r\n\r\nBelow is a very simple AMD-wrapped implementation of the mediator pattern, based on prior work by Ryan Florence. It accepts as it's input an object, to which it attaches `publish()` and `subscribe()` methods. In a larger application, the mediator can contain additional utilities, such as handlers for initializing, starting and stopping modules, but for demonstration purposes, these two methods should work fine for our needs.\r\n\r\n```javascript\r\ndefine([], function(obj){\r\n\r\n  var channels = {};\r\n  if (!obj) obj = {};\r\n\r\n  obj.subscribe = function (channel, subscription) {\r\n    if (!channels[channel]) channels[channel] = [];\r\n    channels[channel].push(subscription);\r\n  };\r\n\r\n  obj.publish = function (channel) {\r\n    if (!channels[channel]) return;\r\n    var args = [].slice.call(arguments, 1);\r\n    for (var i = 0, l = channels[channel].length; i < l; i++) {\r\n      channels[channel][i].apply(this, args);\r\n    }\r\n  };\r\n\r\n  return obj;\r\n\r\n});\r\n```\r\n\r\n\r\n**Facade**\r\n\r\nFound in `aura/facade.js`\r\n\r\nNext, we have an implementation of the facade pattern. Now the classical facade pattern applied to JavaScript would probably look a little like this: \r\n\r\n```javascript\r\n\r\nvar module = (function() {\r\n    var _private = {\r\n        i:5,\r\n        get : function() {\r\n            console.log('current value:' + this.i);\r\n        },\r\n        set : function( val ) {\r\n            this.i = val;\r\n        },\r\n        run : function() {\r\n            console.log('running');\r\n        },\r\n        jump: function(){\r\n            console.log('jumping');\r\n        }\r\n    };\r\n    return {\r\n        facade : function( args ) {\r\n            _private.set(args.val);\r\n            _private.get();\r\n            if ( args.run ) {\r\n                _private.run();\r\n            }\r\n        }\r\n    }\r\n}());\r\n \r\nmodule.facade({run: true, val:10});\r\n//outputs current value: 10, running\r\n```\r\n\r\nIt's effectively a variation of the module pattern, where instead of simply returning an interface of supported methods, your API can completely hide the true implementation powering it, returning something simpler. This allows the logic being performed in the background to be as complex as necessary, whilst all the end-user experiences is a simplified API they pass options to (note how in our case, a single method abstraction is exposed). This is a beautiful way of providing APIs that can be easily consumed.\r\n\r\nThat said, to keep things simple, our implementation of an AMD-compatible facade will act a little more like a proxy. Modules will communicate directly through the facade to access the mediator's `publish()` and `subscribe()` methods, however, they won't as such touch the mediator directly.This enables the facade to provide application-level validation of any subscriptions and publications made.\r\n\r\nIt also allows us to implement a simple, but flexible, permissions checker (as seen below) which will validate subscriptions made against a permissions configuration to see whether it's permitted or not. \r\n\r\n\r\n```javascript\r\ndefine([ \"../aura/mediator\" , \"../aura/permissions\" ], function (mediator, permissions) {\r\n\r\n    var facade = facade || {};\r\n\r\n    facade.subscribe = function(subscriber, channel, callback){\r\n\r\n        // Note: Handling permissions/security is optional here\r\n        // The permissions check can be removed \r\n        // to just use the mediator directly.\r\n        \r\n        if(permissions.validate(subscriber, channel)){\r\n            mediator.subscribe( channel, callback );\r\n        }\r\n    }\r\n\r\n    facade.publish = function(channel){\r\n        mediator.publish( channel );\r\n    }\r\n    return facade;\r\n\r\n});\r\n```\r\n\r\n**Permissions**\r\n\r\nFound in `aura/permissions.js`\r\n\r\nIn our simple permissions configuration, we support checking against subscription requests to establish whether they are allowed to clear. This enforces a flexible security layer for the application.\r\n\r\nTo visually see how this works, consider changing say, permissions -> renderDone -> todoCounter to be false. This will completely disable the application from from rendering or displaying the counts component for Todo items left (because they aren't allowed to subscribe to that event notification). The rest of the Todo app can still however be used without issue. \r\n\r\nIt's a very dumbed down example of the potential for application security, but imagine how powerful this might be in a large app with a significant number of visual widgets.\r\n\r\n```javascript\r\ndefine([], function () {\r\n\r\n    // Permissions\r\n\r\n    // A permissions structure can support checking\r\n    // against subscriptions prior to allowing them \r\n    // to clear. This enforces a flexible security \r\n    // layer for your application.\r\n\r\n    var permissions = {\r\n\r\n        newContentAvailable: {\r\n            contentUpdater:true\r\n        },\r\n\r\n        endContentEditing:{\r\n            todoSaver:true\r\n        },\r\n\r\n        beginContentEditing:{\r\n            editFocus:true\r\n        },\r\n\r\n        addingNewTodo:{\r\n            todoTooltip:true\r\n        },\r\n\r\n        clearContent:{\r\n            garbageCollector:true\r\n        },\r\n\r\n        renderDone:{\r\n            todoCounter:true //switch to false to see what happens :)\r\n        },\r\n\r\n        destroyContent:{\r\n            todoRemover:true\r\n        },\r\n\r\n        createWhenEntered:{\r\n            keyboardManager:true\r\n        }\r\n\r\n    };\r\n\r\n    permissions.validate = function(subscriber, channel){\r\n        var test = permissions[channel][subscriber];\r\n        return test===undefined? false: test;\r\n    };\r\n\r\n    return permissions;\r\n\r\n});\r\n```\r\n\r\n\r\n\r\n**Subscribers**\r\n\r\nFound in `subscribers.js`\r\n\r\nSubscriber 'modules' communicate through the facade back to the mediator and perform actions when a notification event of a particular name is published. \r\n\r\nFor example, when a user enters in a new piece of text for a Todo item and hits 'enter' the application publishes a notification saying two things: a) a new Todo item is available and b) the text content of the new item is X. It's then left up to the rest of the application to do with this information whatever it wishes. \r\n\r\nIn order to update your Backbone application to primarily use pub/sub, a lot of the work you may end up doing will be moving logic coupled inside of specific views to modules outside of it which are reactionary. \r\n\r\nTake the `todoSaver` for example - it's responsibility is saving new Todo items to models once the a `notificationName` called 'newContentAvailable' has fired. If you take a look at the permissions structure in the last code sample, you'll notice that 'newContentAvailable' is present there. If I wanted to prevent subscribers from being able to subscribe to this notification, I simply set it to a boolean value of `false`.\r\n\r\nAgain, this is a massive oversimplification of how advanced your permissions structures could get, but it's certainly one way of controlling what parts of your application can or can't be accessed by specific modules at any time.\r\n\r\n```javascript\r\ndefine([\"jquery\", \"underscore\", \"aura/facade\"], \r\nfunction ($, _, facade) {\r\n\r\n    // Subscription 'modules' for our views. These take the \r\n    // the form facade.subscribe( subscriberName, notificationName , callBack )\r\n\r\n    // Update view with latest todo content\r\n    // Subscribes to: newContentAvailable\r\n\r\n    facade.subscribe('contentUpdater', 'newContentAvailable', function (context) {\r\n        var content = context.model.get('content');\r\n        context.$('.todo-content').text(content);\r\n        context.input = context.$('.todo-input');\r\n        context.input.bind('blur', context.close);\r\n        context.input.val(content);\r\n    });\r\n\r\n\r\n    // Save models when a user has finishes editing\r\n    // Subscribes to: endContentEditing\r\n    facade.subscribe('todoSaver','endContentEditing', function (context) {\r\n        try {\r\n            context.model.save({\r\n                content: context.input.val()\r\n            });\r\n            $(context.el).removeClass(\"editing\");\r\n        } catch (e) {\r\n            //console.log(e);\r\n        }\r\n    });\r\n\r\n\r\n    // Delete a todo when the user no longer needs it\r\n    // Subscribes to: destroyContent\r\n    facade.subscribe('todoRemover','destroyContent', function (context) {\r\n        try {\r\n            context.model.clear();\r\n        } catch (e) {\r\n            //console.log(e);\r\n        }\r\n    });\r\n\r\n\r\n    // When a user is adding a new entry, display a tooltip\r\n    // Subscribes to: addingNewTodo\r\n    facade.subscribe('todoTooltip','addingNewTodo', function (context, todo) {\r\n        var tooltip = context.$(\".ui-tooltip-top\");\r\n        var val = context.input.val();\r\n        tooltip.fadeOut();\r\n        if (context.tooltipTimeout) clearTimeout(context.tooltipTimeout);\r\n        if (val == '' || val == context.input.attr('placeholder')) return;\r\n        var show = function () {\r\n                tooltip.show().fadeIn();\r\n            };\r\n        context.tooltipTimeout = _.delay(show, 1000);\r\n    });\r\n\r\n\r\n    // Update editing UI on switching mode to editing content\r\n    // Subscribes to: beginContentEditing\r\n    facade.subscribe('editFocus','beginContentEditing', function (context) {\r\n        $(context.el).addClass(\"editing\");\r\n        context.input.focus();\r\n    });\r\n\r\n\r\n    // Create a new todo entry \r\n    // Subscribes to: createWhenEntered\r\n    facade.subscribe('keyboardManager','createWhenEntered', function (context, e, todos) {\r\n        if (e.keyCode != 13) return;\r\n        todos.create(context.newAttributes());\r\n        context.input.val('');\r\n    });\r\n\r\n\r\n\r\n    // A Todo and remaining entry counter\r\n    // Subscribes to: renderDone\r\n    facade.subscribe('todoCounter','renderDone', function (context, Todos) {\r\n        var done = Todos.done().length;\r\n        context.$('#todo-stats').html(context.statsTemplate({\r\n            total: Todos.length,\r\n            done: Todos.done().length,\r\n            remaining: Todos.remaining().length\r\n        }));\r\n    });\r\n\r\n\r\n    // Clear all completed todos when clearContent is dispatched\r\n    // Subscribes to: clearContent\r\n    facade.subscribe('garbageCollector','clearContent', function (Todos) {\r\n        _.each(Todos.done(), function (todo) {\r\n            todo.clear();\r\n        });\r\n    });\r\n\r\n\r\n});\r\n```\r\n\r\nThat's it for this section. If you've been intrigued by some of the concepts covered, I encourage you to consider taking a look at my [slides](http://addyosmani.com/blog/large-scale-javascript-application-architecture/) on Large-scale JS from the jQuery Summit or my longer post on the topic [here](http://addyosmani.com/largescalejavascript) for more information. \r\n\r\n\r\n\r\n##Backbone & jQuery Mobile\r\n\r\n###Resolving the routing conflicts\r\n\r\nThe first major hurdle developers typically run into when building Backbone applications with jQuery Mobile is that both frameworks have their own opinions about how to handle application navigation. \r\n\r\nBackbone's routers offer an explicit way to define custom navigation routes through `Backbone.Router`, whilst jQuery Mobile encourages the use of URL hash fragments to reference separate 'pages' or views in the same document. jQuery Mobile also supports automatically pulling in external content for links through XHR calls meaning that there can be quite a lot of inter-framework confusion about what a link pointing at '#photo/id' should actually be doing.\r\n\r\nSome of the solutions that have been previously proposed to work-around this problem included manually patching Backbone or jQuery Mobile. I discourage opting for these techniques as it becomes necessary to manually patch your framework builds when new releases get made upstream. \r\n\r\nThere's also [jQueryMobile router](https://github.com/azicchetti/jquerymobile-router), which tries to solve this problem differently, however I think my proposed solution is both simpler and allows both frameworks to cohabit quite peacefully without the need to extend either. What we're after is a way to prevent one framework from listening to hash changes so that we can fully rely on the other (e.g. `Backbone.Router`) to handle this for us exclusively.\r\n\r\nUsing jQuery Mobile this can be done by setting: \r\n\r\n```javascript\r\n$.mobile.hashListeningEnabled = false;\r\n```\r\n\r\nprior to initializing any of your other code. \r\n\r\nI discovered this method looking through some jQuery Mobile commits that didn't make their way into the official docs, but am happy to see that they are now covered here http://jquerymobile.com/test/docs/api/globalconfig.html in more detail.\r\n\r\nThe next question that arises is, if we're preventing jQuery Mobile from listening to URL hash changes, how can we still get the benefit of being able to navigate to other sections in a document using the built-in transitions and effects supported? Good question. This can now be solve by simply calling `$.mobile.changePage()` as follows:\r\n\r\n```javascript\r\nvar url = '#about',\r\n    effect = 'slideup',\r\n    reverse = false,\r\n    changeHash = false;\r\n\r\n$.mobile.changePage( url , { transition: effect}, reverse, changeHash );\r\n```\r\n\r\nIn the above sample, `url` can refer to a URL or a hash identifier to navigate to, `effect` is simply the transition effect to animate the page in with and the final two parameters decide the direction for the transition (`reverse`) and whether or not the hash in the address bar should be updated (`changeHash`). With respect to the latter, I typically set this to false to avoid managing two sources for hash updates, but feel free to set this to true if you're comfortable doing so.\r\n\r\n**Note:** For some parallel work being done to explore how well the jQuery Mobile Router plugin works with Backbone, you may be interested in checking out https://github.com/Filirom1/jquery-mobile-backbone-requirejs.\r\n\r\n\r\n###Practical: A Backbone, RequireJS/AMD app with jQuery Mobile\r\n\r\n**Note:** The code for this practical can be found in `practicals/modular-mobile-app`.\r\n\r\n###Getting started\r\n\r\nOnce you feel comfortable with the [Backbone fundamentals](http://msdn.microsoft.com/en-us/scriptjunkie/hh377172.aspx) and you've put together a rough wireframe of the app you may wish to build, start to think about your application architecture. Ideally, you'll want to logically separate concerns so that it's as easy as possible to maintain the app in the future.\r\n\r\n**Namespacing**\r\n\r\nFor this application, I opted for the nested namespacing pattern. Implemented correctly, this enables you to clearly identify if items being referenced in your app are views, other modules and so on. This initial structure is a sane place to also include application defaults (unless you prefer maintaining those in a separate file).\r\n\r\n```javascript\r\nwindow.mobileSearch = window.mobileSearch || {\r\n    views: {\r\n        appview: new AppView\r\n    },\r\n    routers:{\r\n        workspace:new Workspace()\r\n    },\r\n    utils: utils,\r\n    defaults:{\r\n        resultsPerPage: 16,\r\n        safeSearch: 2,\r\n        maxDate:'',\r\n        minDate:'01/01/1970'\r\n    }\r\n}\r\n```\r\n\r\n**Models**\r\n\r\nIn the Flickly application, there are at least two unique types of data that need to be modeled - search results and individual photos, both of which contain additional meta-data like photo titles. If you simplify this down, search results are actually groups of photos in their own right, so the application only requires:\r\n\r\n* A single model (a photo or 'result' entry)\r\n* A result collection (containing a group of result entries) for search results\r\n* A photo collection (containing one or more result entries) for individual photos or photos with more than one image\r\n\r\n**Views**\r\n\r\nThe views we'll need include an application view, a search results view and a photo view. Static views or pages of the single-page application which do not require a dynamic element to them (e.g an 'about' page) can be easily coded up in your document's markup, independent of Backbone.\r\n\r\n**Routers**\r\n\r\nA number of possible routes need to be taken into consideration:\r\n\r\n* Basic search queries `#search/kiwis`\r\n* Search queries with additional parameters (e.g sort, pagination) `#search/kiwis/srelevance/p7`\r\n* Queries for specific photos `#photo/93839`\r\n* A default route (no parameters passed)\r\n\r\n\r\nThis tutorial will be expanded shortly to fully cover the demo application. In the mean time, please see the practicals folder for the completed application that demonstrates the router resolution discussed earlier between Backbone and jQuery Mobile.\r\n\r\n\r\n###jQuery Mobile: Going beyond mobile application development\r\n\r\nThe majority of jQM apps I've seen in production have been developed for the purpose of providing an optimal experience to users on mobile devices. Given that the framework was developed for this purpose, there's nothing fundamentally wrong with this, but many developers forget that jQM is a UI framework not dissimilar to jQuery UI. It's using the widget factory and is capable of being used for a lot more than we give it credit for.\r\n\r\nIf you open up Flickly in a desktop browser, you'll get an image search UI that's modeled on Google.com, however, review the components (buttons, text inputs, tabs) on the page for a moment. The desktop UI doesn't look anything like a mobile application yet I'm still using jQM for theming mobile components; the tabs, date-picker, sliders - everything in the desktop UI is re-using what jQM would be providing users on mobile devices. Thanks to some media queries, the desktop UI can make optimal use of whitespace, expanding component blocks out and providing alternative layouts whilst still making use of jQM as a component framework.\r\n\r\nThe benefit of this is that I don't need to go pulling in jQuery UI separately to be able to take advantage of these features. Thanks to the recent ThemeRoller my components can look pretty much exactly how I would like them to and users of the app can get a jQM UI for lower-resolutions and a jQM-ish UI for everything else.\r\n\r\nThe takeaway here is just to remember that if you're not (already) going through the hassle of conditional script/style loading based on screen-resolution (using matchMedia.js etc), there are simpler approaches that can be taken to cross-device component theming.\r\n\r\n\r\n##<a name=\"testing\">Testing</a>\r\n\r\n#Unit Testing Backbone Applications With Jasmine\r\n\r\n##Introduction\r\n\r\nOne definition of unit testing is the process of taking the smallest piece of testable code in an application, isolating it from the remainder of your codebase and determining if it behaves exactly as expected. In this section, we'll be taking a look at how to unit test Backbone applications using a popular JavaScript testing framework called [Jasmine](http://pivotal.github.com/jasmine/) from Pivotal Labs.\r\n\r\nFor an application to be considered 'well'-tested, distinct functionality should ideally have its own separate unit tests where it's tested against the different conditions you expect it to work under. All tests must pass before functionality is considered 'complete'. This allows developers to both modify a unit of code and it's dependencies with a level of confidence about whether these changes have caused any breakage.\r\n\r\nAs a basic example of unit testing is where a developer may wish to assert whether passing specific values through to a sum function results in the correct output being returned. For an example more relevant to this book, we may wish to assert whether a user adding a new Todo item to a list correctly adds a Model of a specific type to a Todos Collection.\r\n\r\nWhen building modern web-applications, it's typically considered best-practice to include automated unit testing as a part of your development process. Whilst we'll be focusing on Jasmine as a solution for this, there are a number of other alternatives worth considering, including QUnit.\r\n\r\n##Jasmine\r\n\r\nJasmine describes itself as a behavior-driven development (BDD) framework for testing JavaScript code. Before we jump into how the framework works, it's useful to understand exactly what [BDD](http://en.wikipedia.org/wiki/Behavior_Driven_Development) is.\r\n\r\nBDD is a second-generation testing approach first described by [Dan North](http://dannorth.net/introducing-bdd/) (the authority on BDD) which attempts to test the behavior of software. It's considered second-generation as it came out of merging ideas from Domain driven design (DDD) and lean software development, helping teams to deliver high quality software by answering many of the more confusing questions early on in the agile process. Such questions commonly include those concerning documentation and testing.\r\n\r\nIf you were to read a book on BDD, it's likely to also be described as being 'outside-in and pull-based'. The reason for this is that it borrows the idea of of pulling features from Lean manufacturing which effectively ensures that the right software solutions are being written by a) focusing on expected outputs of the system and b) ensuring these outputs are achieved.\r\n\r\nBDD recognizes that there are usually multiple stakeholders in a project and not a single amorphous user of the system. These different groups will be affected by the software being written in differing ways and will have a varying opinion of what quality in the system means to them. It's for this reason that it's important to understand who the software will be bringing value you and exactly what in it will be valuable to them.\r\n\r\nFinally, BDD relies on automation. Once you've defined the quality expected, your team will likely want to check on the functionality of the solution being built regularly and compare it to the results they expect. In order to facilitate this efficiently, the process has to be automated. BDD relies heavily on the automation of specification-testing and Jasmine is a tool which can assist with this. \r\n\r\nBDD helps both developers and non-technical stakeholders:\r\n\r\n\r\n* Better understand and represent the models of the problems being solved\r\n* Explain supported tests cases in a language that non-developers can read\r\n* Focus on minimizing translation of the technical code being written and the domain language spoken by the business\r\n\r\nWhat this means is that developers should be able to show Jasmine unit tests to a project stakeholder and (at a high level, thanks to a common vocabulary being used) they'll ideally be able to understand what the code supports. \r\n\r\nDevelopers often implement BDD in unison with another testing paradigm known as [TDD](http://en.wikipedia.org/wiki/Test-driven_development) (test-driven development). The main idea behind TDD is:\r\n\r\n* Write unit tests which describe the functionality you would like your code to support\r\n* Watch these tests fail (as the code to support them hasn't yet been written)\r\n* Write code to make the tests pass\r\n* Rinse, repeat and refactor\r\n\r\nIn this chapter we're going to use both BDD (with TDD) to write unit tests for a Backbone application.\r\n\r\n***Note:*** I've seen a lot of developers also opt for writing tests to validate behavior of their code after having written it. While this is fine, note that it can come with pitfalls such as only testing for behavior your code currently supports, rather than behavior the problem needs to be supported.\r\n\r\n\r\n##Suites, Specs & Spies\r\n\r\nWhen using Jasmine, you'll be writing suites and specifications (specs). Suites basically describe scenarios whilst specs describe what can be done in these scenarios.\r\n\r\nEach spec is a JavaScript function, described with a call to ```it()`` using a description string and a function. The description should describe the behaviour the particular unit of code should exhibit and keeping in mind BDD, it should ideally be meaningful. Here's an example of a basic spec:\r\n\r\n```javascript\r\nit('should be incrementing in value', function(){\r\n    var counter = 0;\r\n    counter++;  \r\n});\r\n```\r\n\r\nOn it's own, a spec isn't particularly useful until expectations are set about the behavior of the code. Expectations in specs are defined using the ```expect()``` function and an [expectation matcher](https://github.com/pivotal/jasmine/wiki/Matchers) (e.g toEqual(), toBeTruthy(), toContain()). A revised example using an expectation matcher would look like:\r\n\r\n```javascript\r\nit('should be incrementing in value', function(){\r\n    var counter = 0;\r\n    counter++;  \r\n    expect(counter).toEqual(1);\r\n});\r\n``` \r\n\r\nThe above code passes our behavioral expectation as ```counter`` equals 1. Notice how easy this was to read the expectation on the last line (you probably grokked it without any explanation).\r\n\r\nSpecs are grouped into suites which we describe using Jasmine's ```describe()``` function, again passing a string as a description and a function. The name/description for your suite is typically that of the component or module you're testing. \r\n\r\nJasmine will use it as the group name when it reports the results of the specs you've asked it to run. A simple suite containing our sample spec could look like:\r\n\r\n```javascript\r\ndescribe('Stats', function(){\r\n    it('can increment a number', function(){\r\n        ...\r\n    });\r\n    \r\n    it('can subtract a number', function(){\r\n        ...\r\n    });\r\n});\r\n```\r\n\r\nSuites also share a functional scope and so it's possible to declare variables and functions inside a describe block which are accessible within specs:\r\n\r\n```javascript\r\ndescribe('Stats', function(){\r\n    var counter = 1;\r\n    \r\n    it('can increment a number', function(){\r\n        // the counter was = 1\r\n        counter = counter + 1;\r\n        expect(counter).toEqual(2);\r\n    });\r\n    \r\n    it('can subtract a number', function(){\r\n        // the counter was = 2\r\n        counter = counter - 1;\r\n        expect(counter).toEqual(1);\r\n    });\r\n});\r\n```\r\n\r\n***Note:*** Suites are executed in the order in which they are described, which can be useful to know if you would prefer to see test results for specific parts of your application reported first.\r\n\r\nJasmine also supports **spies** - a way to mock, spy and fake behavior in our unit tests. Spies replace the function they're spying on, allowing us to simulate behavior we would like to mock (i.e test free of the actual implementation).\r\n\r\nIn the below example, we're spying on the ```setComplete``` method of a dummy Todo function to test that arguments can be passed to it as expected. \r\n\r\n```javascript\r\nvar Todo = function(){\r\n};\r\n\r\nTodo.prototype.setComplete = function (arg){\r\n    return arg;\r\n}\r\n\r\ndescribe('a simple spy', function(){\r\n    it('should spy on an instance method of a Todo', function(){\r\n        var myTodo = new Todo();\r\n        spyOn(myTodo, 'setComplete');\r\n        myTodo.setComplete('foo bar');\r\n        \r\n        expect(myTodo.setComplete).toHaveBeenCalledWith('foo bar');\r\n        \r\n        var myTodo2 = new Todo();\r\n        spyOn(myTodo2, 'setComplete');\r\n        \r\n        expect(myTodo2.setComplete).not.toHaveBeenCalled();\r\n        \r\n    });\r\n});\r\n```\r\n\r\nWhat you're more likely to use spies for is testing [asynchronous](http://en.wikipedia.org/wiki/Asynchronous_communication) behavior in your application such as AJAX requests. Jasmine supports:\r\n\r\n* Writing tests which can mock AJAX requests using spies. This allows us to test code which runs before an AJAX request and right after. It's also possible to mock/fake responses the server can return and the benefit of this type of testing is that it's faster as no real calls are being made to a server\r\n* Asynchronous tests which don't rely on spies\r\n\r\nFor the first kind of test, it's possible to both fake an AJAX request and verify that the request was both calling the correct URL and executed a callback where one was provided.\r\n\r\n```javascript\r\nit(\"the callback should be executed on success\", function () {\r\n    spyOn($, \"ajax\").andCallFake(function(options) {\r\n        options.success();\r\n    });\r\n    \r\n    var callback = jasmine.createSpy();\r\n    getTodo(15, callback);\r\n    \r\n    expect($.ajax.mostRecentCall.args[0][\"url\"]).toEqual(\"/todos/15\");\r\n    expect(callback).toHaveBeenCalled();\r\n});\r\n\r\nfunction getTodo(id, callback) {\r\n    $.ajax({\r\n        type: \"GET\",\r\n        url: \"/todos/\" + id,\r\n        dataType: \"json\",\r\n        success: callback\r\n    });\r\n}\r\n```\r\n\r\nIf you feel lost having seen matchers like ```andCallFake()``` and ```toHaveBeenCalled()```, don't worry. All of these are Spy-specific matchers and are documented on the Jasmine [wiki](https://github.com/pivotal/jasmine/wiki/Spies).\r\n\r\nFor the second type of test (asynchronous tests), we can take the above further by taking advantage of three other methods Jasmine supports:\r\n\r\n* runs(function) - a block which runs as if it was directly called\r\n* waits(timeout) - a native timeout before the next block is run\r\n* waitsFor(function, optional message, optional timeout) - a way to pause specs until some other work has completed. Jasmine waits until the supplied function returns true here before it moves on to the next block.\r\n\r\n\r\n```javascript\r\nit(\"should make an actual AJAX request to a server\", function () {\r\n    \r\n    var callback = jasmine.createSpy();\r\n    getTodo(16, callback);\r\n    \r\n    waitsFor(function() {\r\n        return callback.callCount > 0;\r\n    });\r\n    \r\n    runs(function() {\r\n        expect(callback).toHaveBeenCalled();\r\n    });\r\n});\r\n\r\nfunction getTodo(id, callback) {\r\n    $.ajax({\r\n        type: \"GET\",\r\n        url: \"todos.json\",\r\n        dataType: \"json\",\r\n        success: callback\r\n    });\r\n}\r\n```\r\n\r\n***Note:*** It's useful to remember that when making real requests to a web server in your unit tests, this has the potential to massively slow down the speed at which tests run (due to many factors including server latency). As this also introduces an external dependency that can (and should) be minimized in your unit testing, it is strongly recommended that you opt for spies to remove the need for a web server to be used here.\r\n\r\n##beforeEach and afterEach()\r\n\r\nJasmine also supports specifying code that can be run before each (```beforeEach()```) and after each (```afterEach```) test. This is useful for enforcing consistent conditions (such as resetting variables that may be required by specs). In the following example, ```beforeEach()``` is used to create a new sample Todo model specs can use for testing attributes.\r\n\r\n```javascript\r\nbeforeEach(function(){\r\n   this.todo = new Backbone.Model({\r\n      text: \"Buy some more groceries\",\r\n      done: false \r\n   });\r\n});\r\n\r\nit(\"should contain a text value if not the default value\", function(){\r\n   expect(this.todo.get('text')).toEqual(\"Buy some more groceries\"); \r\n});\r\n```\r\n\r\nEach nested ```describe()``` in your tests can have their own ```beforeEach()``` and ```afterEach()``` methods which support including setup and teardown methods relevant to a particular suite. We'll be using ```beforeEach()``` in practice a little later.\r\n\r\n##Shared scope\r\n\r\nIn the previous section you may have noticed that we initially declared a variable ```this.todo``` in our ```beforeEach()``` call and were then able to continue using this in ```afterEach()```. This is thanks to a powerful feature of Jasmine known as shared  functional scope. Shared scope allows ```this``` properties to be common to all blocks (including ```runs()```), but not declared variables (i.e ```var```s). \r\n\r\n\r\n##Getting setup\r\n\r\nNow that we've reviewed some fundamentals, let's go through downloading Jasmine and getting everything setup to write tests. \r\n\r\nA standalone release of Jasmine can be [downloaded](http://pivotal.github.com/jasmine/download.html) from the official release page. \r\n\r\nYou'll need a file called SpecRunner.html in addition to the release. It can be downloaded from https://github.com/pivotal/jasmine/tree/master/lib/jasmine-core/example or as part of a download of the complete Jasmine [repo](https://github.com/pivotal/jasmine/zipball/master).Alternatively, you can ```git clone``` the main Jasmine repository from https://github.com/pivotal/jasmine.git. \r\n\r\nLet's review [SpecRunner.html](https://github.com/pivotal/jasmine/blob/master/lib/jasmine-core/example/SpecRunner.html):\r\n\r\nIt first includes both Jasmine and the necessary CSS required for reporting:\r\n\r\n```html\r\n<link rel=\"stylesheet\" type=\"text/css\" href=\"lib/jasmine-1.1.0.rc1/jasmine.css\"/>\r\n<script type=\"text/javascript\" src=\"lib/jasmine-1.1.0.rc1/jasmine.js\"></script>\r\n<script type=\"text/javascript\" src=\"lib/jasmine-1.1.0.rc1/jasmine-html.js\"></script>\r\n```\r\n\r\nNext, some sample tests are included:\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"spec/SpecHelper.js\"></script>\r\n<script type=\"text/javascript\" src=\"spec/PlayerSpec.js\"></script>\r\n```\r\n\r\nAnd finally the sources being tested:\r\n\r\n```html\r\n<script type=\"text/javascript\" src=\"src/Player.js\"></script>\r\n<script type=\"text/javascript\" src=\"src/Song.js\"></script>\r\n```\r\n\r\n***Note:*** Below this section of SpecRunner is code responsible for running the actual tests. Given that we won't be covering modifying this code, I'm going to skip reviewing it. I do however encourage you to take a look through [PlayerSpec.js](https://github.com/pivotal/jasmine/blob/master/lib/jasmine-core/example/spec/PlayerSpec.js) and [SpecHelper.js](https://github.com/pivotal/jasmine/blob/master/lib/jasmine-core/example/spec/SpecHelper.js). They're a useful basic example to go through how a minimal set of tests might work.\r\n\r\n##TDD With Backbone\r\n\r\nWhen developing applications with Backbone, it can be necessary to test both individual modules of code as well as modules, views, collections and routers. Taking a TDD approach to testing, let's review some specs for testing these Backbone components using the popular Backbone [Todo](https://github.com/addyosmani/todomvc/tree/master/todo-example/backbone) application. \r\n\r\nI would like to extend my thanks to Larry Myers for his [Koans](https://github.com/addyosmani/backbone-koans) project which both greatly helped here and will be used in the exercise portion of this chapter.\r\n\r\n\r\n##<a name=\"testing-models\">Models</a>\r\n\r\nThe complexity of Backbone models can vary greatly depending on what your application is trying to achieve. In the following example, we're going to test default values, attributes, state changes and validation rules.  \r\n\r\nFirst, we begin our suite for model testing using ```describe()```:\r\n\r\n```javascript\r\ndescribe('Tests for Todo', function() {\r\n```\r\n\r\nModels should ideally have default values for attributes. This helps ensure that when creating instances without a value set for any specific attribute, a default one (e.g \"\") is used instead. The idea here is to allow your application to interact with models without any unexpected behavior. \r\n\r\nIn the following spec, we create a new Todo without any attributes passed then check to find out what the value of the ```text``` attribute is. As no value has been set, we expect a default value of ```\"\"`` to be returned.\r\n\r\n```javascript\r\nit('Can be created with default values for its attributes.', function() {\r\n    var todo = new Todo();\r\n    expect(todo.get('text')).toBe(\"\");\r\n});\r\n```\r\n\r\nIf testing this spec before your models have been written, you'll incur a failing test, as expected. What's required for the spec to pass is a default value for the attribute ```text```. We can implement this default value with some other useful defaults (which we'll be using shortly) in our Todo model as follows:\r\n\r\n```javascript\r\nwindow.Todo = Backbone.Model.extend({\r\n\r\n    defaults: function() {\r\n        return {\r\n            text: \"\",\r\n            done:  false,\r\n            order: 0\r\n        };\r\n    }\r\n ```\r\n   \r\nNext, we want to test that our model will pass attributes that are set such that retrieving the value of these attributes after initialization will be what we expect. Notice that here, in addition to testing for an expected value for ```text```, we're also testing the other default values are what we expect them to be.\r\n    \r\n```javascript\r\nit('Will set passed attributes on the model instance when created.', function() {\r\n    var todo = new Todo({ text: 'Get oil change for car.' });\r\n    \r\n    // what are the values expected here for each of the\r\n    // attributes in our Todo?\r\n    \r\n    expect(todo.get('text')).toBe(\"Get oil change for car.\");\r\n    expect(todo.get('done')).toBe(false);\r\n    expect(todo.get('order')).toBe(0);\r\n});\r\n```\r\n\r\nBackbone models support a model.change() event which is triggered when the state of a model changes. In the following example, by 'state' I'm referring to the value of a Todo model's attributes. The reason changes of state are important to test are that there may be state-dependent events in your application e.g you may wish to display a confirmation view once a Todo model has been updated.\r\n\r\n```javascript\r\nit('Fires a custom event when the state changes.', function() {\r\n\r\n    var spy = jasmine.createSpy('-change event callback-');\r\n    \r\n    var todo = new Todo();\r\n    \r\n    // how do we monitor changes of state?\r\n    todo.bind('change', spy);\r\n    \r\n    // what would you need to do to force a change of state?\r\n    todo.set({ text: 'Get oil change for car.' });\r\n    \r\n    expect(spy).toHaveBeenCalled();\r\n});\r\n```\r\n\r\nIt's common to include validation logic in your models to ensure both the input passed from users (and other modules) in the application are 'valid'. A Todo app may wish to validate the text input supplied in case it contains rude words. Similarly if we're storing the ```done``` state of a Todo item using booleans, we need to validate that truthy/falsy values are passed and not just any arbitrary string. \r\n\r\nIn the following spec, we take advantage of the fact that validations which fail model.validate() trigger an \"error\" event. This allows us to test if validations are correctly failing when invalid input is supplied. \r\n\r\nWe create an errorCallback spy using Jasmine's built in ```createSpy()``` method which allows us to spy on the error event as follows:\r\n\r\n```javascript\r\nit('Can contain custom validation rules, and will trigger an error event on failed validation.', function() {\r\n\r\n    var errorCallback = jasmine.createSpy('-error event callback-');\r\n    \r\n    var todo = new Todo();\r\n    \r\n    todo.bind('error', errorCallback);\r\n    \r\n    // What would you need to set on the todo properties to \r\n    // cause validation to fail?\r\n\r\n    todo.set({done:'a non-integer value'});\r\n    \r\n    var errorArgs = errorCallback.mostRecentCall.args;\r\n    \r\n    expect(errorArgs).toBeDefined();\r\n    expect(errorArgs[0]).toBe(todo);\r\n    expect(errorArgs[1]).toBe('Todo.done must be a boolean value.');\r\n});\r\n\r\n```\r\n\r\nThe code to make the above failing test support validation is relatively simple. In our model, we override the validate() method (as recommended in the Backbone docs), checking to make sure a model both has a 'done' property and is a valid boolean before allowing it to pass.\r\n\r\n```javascript\r\nvalidate: function(attrs) {\r\n    if (attrs.hasOwnProperty('done') && !_.isBoolean(attrs.done)) {\r\n        return 'Todo.done must be a boolean value.';\r\n    }\r\n}\r\n```\r\n\r\nIf you would like to review the final code for our Todo model, you can find it below:\r\n\r\n```javascript\r\nvar NAUGHTY_WORDS = /crap|poop|hell|frogs/gi;\r\n\r\nfunction sanitize(str) {\r\n    return str.replace(NAUGHTY_WORDS, 'rainbows');\r\n}\r\n\r\nwindow.Todo = Backbone.Model.extend({\r\n\r\n    defaults: function() {\r\n        return {\r\n            text: '',\r\n            done:  false,\r\n            order: 0\r\n        };\r\n    },\r\n    \r\n    initialize: function() {\r\n        this.set({text: sanitize(this.get('text'))}, {silent: true});\r\n    },\r\n    \r\n    validate: function(attrs) {\r\n        if (attrs.hasOwnProperty('done') && !_.isBoolean(attrs.done)) {\r\n            return 'Todo.done must be a boolean value.';\r\n        }\r\n    },\r\n\r\n    toggle: function() {\r\n        this.save({done: !this.get(\"done\")});\r\n    }\r\n\r\n});\r\n```\r\n\r\n\r\n##<a name=\"testing-collections\">Collections</a>\r\n\r\nWe now need to define specs to tests a Backbone collection of Todo models (a TodoList). Collections are responsible for a number of list tasks including managing order and filtering.\r\n\r\nA few specific specs that come to mind when working with collections are:\r\n\r\n* Making sure we can add new Todo models as both objects and arrays\r\n* Attribute testing to make sure attributes such as the base URL of the collection are values we expect\r\n* Purposefully adding items with a status of ```done:true``` and checking against how many items the collection thinks have been completed vs. those that are remaining\r\n\r\nIn this section we're going to cover the first two of these with the third left as an extended exercise I recommend trying out.\r\n\r\nTesting Todo models can be added to a collection as objects or arrays is relatively trivial. First, we initialize a new TodoList collection and check to make sure it's length (i.e the number of Todo models it contains) is 0. Next, we add new Todos, both as objects and arrays, checking the length property of the collection at each stage to ensure the overall count is what we expect:\r\n\r\n```javascript\r\ndescribe('Tests for TodoList', function() {\r\n\r\n    it('Can add Model instances as objects and arrays.', function() {\r\n        var todos = new TodoList();\r\n        \r\n        expect(todos.length).toBe(0);\r\n        \r\n        todos.add({ text: 'Clean the kitchen' });\r\n        \r\n        // how many todos have been added so far?\r\n        expect(todos.length).toBe(1);\r\n        \r\n        todos.add([\r\n            { text: 'Do the laundry', done: true }, \r\n            { text: 'Go to the gym'}\r\n        ]);\r\n        \r\n        // how many are there in total now?\r\n        expect(todos.length).toBe(3);\r\n    });\r\n...\r\n```\r\n\r\nSimilar to model attributes, it's also quite straight-forward to test attributes in collections. Here we have a spec that ensures the collection.url (i.e the url reference to the collection's location on the server) is what we expect it to be:\r\n\r\n```javascript\r\nit('Can have a url property to define the basic url structure for all contained models.', function() {\r\n        var todos = new TodoList();\r\n        \r\n        // what has been specified as the url base in our model?\r\n        expect(todos.url).toBe('/todos/');\r\n});\r\n    \r\n```\r\n\r\nFor the third spec, it's useful to remember that the implementation for our collection will have methods for filtering how many Todo items are done and how many are remaining - we can call these ```done()``` and ```remaining()```. Consider writing a spec which creates a new collection and adds one new model that has a preset ```done``` state of ```true``` and two others that have the default ```done``` state of ```false```. Testing the length of what's returned using ```done()``` and ```remaining()``` should allow us to know whether the state management in our application is working or needs a little tweaking.\r\n\r\nThe final implementation for our TodoList collection can be found below:\r\n\r\n\r\n```javascript\r\n window.TodoList = Backbone.Collection.extend({\r\n\r\n        model: Todo,\r\n        \r\n        url: '/todos/',\r\n\r\n        done: function() {\r\n            return this.filter(function(todo) { return todo.get('done'); });\r\n        },\r\n\r\n        remaining: function() {\r\n            return this.without.apply(this, this.done());\r\n        },\r\n        \r\n        nextOrder: function() {\r\n            if (!this.length) { \r\n                return 1; \r\n            }\r\n            \r\n            return this.last().get('order') + 1;\r\n        },\r\n\r\n        comparator: function(todo) {\r\n            return todo.get('order');\r\n        }\r\n\r\n    });\r\n```\r\n\r\n\r\n##<a name=\"testing-views\">Views</a>\r\n\r\nBefore we take a look at testing Backbone views, let's briefly review a jQuery plugin that can assist with writing Jasmine specs for them.\r\n\r\n**The Jasmine jQuery Plugin**\r\n\r\nAs we know our Todo application will be using jQuery for DOM manipulation, there's a useful jQuery plugin called [jasmine-jquery](https://github.com/velesin/jasmine-jquery) we can use to help simplify BDD testing rendered elements that our views may produce. \r\n\r\nThe plugin provides a number of additional Jasmine [matchers](https://github.com/pivotal/jasmine/wiki/Matchers) to help test jQuery wrapped sets such as:\r\n\r\n* ```toBe(jQuerySelector)``` e.g ```expect($('<div id=\"some-id\"></div>')).toBe('div#some-id')```\r\n* ```toBeChecked()``` e.g ```expect($('<input type=\"checkbox\" checked=\"checked\"/>')).toBeChecked()```\r\n* ```toBeSelected()``` e.g ```expect($('<option selected=\"selected\"></option>')).toBeSelected()```\r\n\r\nand [many others](https://github.com/velesin/jasmine-jquery). The complete list of matchers supported can be found on the project homepage. It's useful to know that similar to the standard Jasmine matchers, the custom matchers above can be inverted using the .not prefix (i.e ```expect(x).not.toBe(y)```):\r\n\r\n```expect($('<div>I am an example</div>')).not.toHaveText(/other/)```\r\n\r\njasmine-jquery also includes a fixtures model, allowing us to load in arbitrary HTML content we may wish to use in our tests. Fixtures can be used as follows:\r\n\r\nInclude some HTML in an external fixtures file:\r\n\r\nsome.fixture.html:\r\n```<div id=\"sample-fixture\">some HTML content</div>```\r\n\r\nNext, inside our actual test we would load it as follows:\r\n\r\n```javascript\r\nloadFixtures('some.fixture.html')\r\n$('some-fixture').myTestedPlugin();\r\nexpect($('#some-fixture')).to<the rest of your matcher would go here>\r\n```\r\n\r\nThe jasmine-jquery plugin is by default setup to load fixtures from a specific directory: spec/javascripts/fixtures. If you wish to configure this path you can do so by initially setting ```jasmine.getFixtures().fixturesPath = 'your custom path'```.\r\n\r\nFinally, jasmine-jquery includes support for spying on jQuery events without the need for any extra plumbing work. This can be done using the ```spyOnEvent()``` and ```assert(eventName).toHaveBeenTriggered(selector)``` functions. An example of usage may look as follows:\r\n\r\n```javascript\r\nspyOnEvent($('#el'), 'click');\r\n$('#el').click();\r\nexpect('click').toHaveBeenTriggeredOn($('#el'));\r\n```\r\n\r\n**View testing**\r\n\r\nIn this section we will review three dimensions to writing specs for Backbone Views: initial setup, view rendering and finally templating. The latter two of these are the most commonly tested, however we'll review shortly why writing specs for the initialization of your views can also be of benefit.\r\n\r\n##Initial setup\r\n\r\nAt their most basic, specs for Backbone views should validate that they are being correctly tied to specific DOM elements and are backed by valid data models. The reason to consider doing this is that failures to such specs can trip up more complex tests later on and they're fairly simple to write, given the overall value offered.\r\n\r\nTo help ensure a consistent testing setup for our specs, we use ```beforeEach()``` to append both an empty ```UL``` (#todoList) to the DOM and initialize a new instance of a TodoView using an empty Todo model. ```afterEach()``` is used to remove the previous #todoList  ```UL``` as well as the previous instance of the view. \r\n\r\n```javascript\r\ndescribe('Tests for TodoView', function() {\r\n    \r\n    beforeEach(function() {\r\n        $('body').append('<ul id=\"todoList\"></ul>');\r\n        this.todoView = new TodoView({ model: new Todo() });\r\n    });\r\n    \r\n\r\n    afterEach(function() {\r\n        this.todoView.remove();\r\n        $('#todoList').remove();\r\n    });\r\n    \r\n...\r\n```\r\n\r\nThe first spec useful to write is a check that the TodoView we've created is using the correct ```tagName``` (element or className). The purpose of this test is to make sure it's been correctly tied to a DOM element when it was created.\r\n\r\nBackbone views typically create empty DOM elements once initialized, however these elements are not attached to the visible DOM in order to allow them to be constructed without an impact on the performance of rendering. \r\n\r\n```javascript\r\nit('Should be tied to a DOM element when created, based off the property provided.', function() {\r\n    //what html element tag name represents this view?\r\n    expect(todoView.el.tagName.toLowerCase()).toBe('li');\r\n});\r\n```\r\n \r\nOnce again, if the TodoView has not already been written, we will experience failing specs. Thankfully, solving this is as simple as creating a new Backbone.View with a specific ```tagName```.\r\n\r\n```javascript\r\nvar todoView = Backbone.View.extend({\r\n    tagName:  \"li\"\r\n});\r\n```\r\n\r\nIf instead of testing against the ```tagName``` you would prefer to use a className instead, we can take advantage of jasmine-jquery's ```toHaveClass()``` matcher to cater for this.\r\n\r\n```javascript\r\nit('Should have a class of \"todos\"'), function(){\r\n   expect($(this.view.el)).toHaveClass('todos');\r\n});\r\n```\r\n\r\nThe ```toHaveClass()``` matcher operates on jQuery objects and if the plugin hadn't been used, an exception would have been incurred (it is of course also possible to test for the className by accessing el.className if not opting to use jasmine-jquery).\r\n\r\nYou may have noticed that in ```beforeEach()```, we passed our view an initial (albeit unfilled) Todo model. Views should be backed by a model instance which provides data. As this is quite important to our view's ability to function, we can write a spec to ensure a model is both defined (using the ```toBeDefined()``` matcher) and then test attributes of the model to ensure defaults both exist and are the value we expect them to be.\r\n\r\n```javascript\r\nit('Is backed by a model instance, which provides the data.', function() {\r\n\r\n    expect(todoView.model).toBeDefined();\r\n\r\n    // what's the value for Todo.get('done') here?\r\n    expect(todoView.model.get('done')).toBe(false); //or toBeFalsy()\r\n});\r\n```\r\n\r\n##View rendering\r\n\r\n\r\nNext we're going to take a look at writing specs for view rendering. Specifically, we want to test that our TodoView elements are actually rendering as expected. \r\n\r\nIn smaller applications, those new to BDD might argue that visual confirmation of view rendering could replace unit testing of views. The reality is that when dealing with applications that might grow to multiple-views, it often makes sense to automate this process as much as possible from the get-go. There are also aspects of rendering that require verification beyond what is visually presented on-screen (which we'll see very shortly).\r\n\r\nWe're going to begin testing views by writing two specs. The first spec will check that the view's ```render()``` method is correctly returning the view instance, which is necessary for chaining. Our second spec will check that the HTML produced is exactly what we expect based on the properties of the model instance that's been associated with our TodoView.\r\n\r\nUnlike some of the previous specs we've covered, this section will make greater use of ```beforeEach()``` to both demonstrate how to use nested suites and also ensure a consistent set of conditions for our specs. In our first view spec for TodoView, we're simply going to create a sample model (based on Todo) and instantiate a TodoView which associates it with the model.\r\n\r\n```javascript\r\ndescribe(\"TodoView\", function() {\r\n\r\n  beforeEach(function() {\r\n    this.model = new Backbone.Model({\r\n      text: \"My Todo\",\r\n      order: 1,\r\n      done: false\r\n    });\r\n    this.view = new TodoView({model:this.model});\r\n  });\r\n\r\n  describe(\"Rendering\", function() {\r\n    \r\n    it(\"returns the view object\", function() {\r\n      expect(this.view.render()).toEqual(this.view);\r\n    });\r\n    \r\n    it(\"produces the correct HTML\", function() {\r\n      this.view.render();\r\n\r\n      //let's use jasmine-jquery's toContain() to avoid\r\n      //testing for the complete content of a todo's markup\r\n      expect(this.view.el.innerHTML)\r\n        .toContain('<label class=\"todo-content\">My Todo</label>');\r\n    });\r\n    \r\n  });\r\n  \r\n});\r\n```\r\n\r\n\r\nOnce these specs are run, only the second one ('produces the correct HTML') fails. Our first spec ('returns the view object'), which is testing that the TodoView instance is returned from ```render()```, only passed as this is Backbone's default behavior. We haven't yet overwritten the ```render()``` method with our own version.\r\n\r\n**Note:** For the purposes of maintaining readability, all template examples in this section will use a minimal version of the following Todo view template. As it's relatively trivial to expand this, please feel free to refer to this sample if needed: \r\n\r\n\r\n```html\r\n<div class=\"todo <%= done ? 'done' : '' %>\">\r\n        <div class=\"display\">\r\n          <input class=\"check\" type=\"checkbox\" <%= done ? 'checked=\"checked\"' : '' %> />\r\n          <label class=\"todo-content\"><%= text %></label>\r\n          <span class=\"todo-destroy\"></span>\r\n        </div>\r\n        <div class=\"edit\">\r\n          <input class=\"todo-input\" type=\"text\" value=\"<%= content %>\" />\r\n        </div>\r\n</div>\r\n```\r\n\r\n\r\nThe second spec fails with the following message:\r\n\r\nExpected '' to contain ```'<label class=\"todo-content\">My Todo</label>'```.\r\n\r\nThe reason for this is the default behavior for render() doesn't create any markup. Let's write a replacement for render() which fixes this:\r\n\r\n```javascript\r\nrender: function() {\r\n  var template = '<label class=\"todo-content\"><%= text %></label>';\r\n  var output = template\r\n    .replace(\"<%= text %>\", this.model.get('text'));\r\n  $(this.el).html(output);\r\n  return this;\r\n}\r\n```\r\n\r\nThe above specifies an inline string template and replaces fields found in the template within the \"<% %>\" blocks with their corresponding values from the associated model. As we're now also returning the TodoView instance from the method, the first spec will also pass. It's worth noting that there are serious drawbacks to using HTML strings in your specs to test against like this. Even minor changes to your template (a simple tab or whitespace) would cause your spec to fail, despite the rendered output being the same. It's also more time consuming to maintain as most templates in real-world applications are significantly more complex. A better option for testing rendered output is using jQuery to both select and inspect values. \r\n\r\nWith this in mind, let's re-write the specs, this time using some of the custom matchers offered by jasmine-jquery:\r\n\r\n\r\n```javascript\r\ndescribe(\"Template\", function() {\r\n  \r\n  beforeEach(function() {\r\n    this.view.render();\r\n  });\r\n\r\n  it(\"has the correct text content\", function() {\r\n    expect($(this.view.el).find('todo-content'))\r\n      .toHaveText('My Todo');\r\n  });\r\n  \r\n});\r\n```\r\n\r\n\r\nIt would be impossible to discuss unit testing without mentioning fixtures. Fixtures typically contain test data (e.g HTML) that is loaded in when needed (either locally or from an external file) for unit testing. So far we've been establishing jQuery expectations based on the view's el property. This works for a number of cases, however, there are instances where it may be necessary to render markup into the document. The most optimal way to handle this within specs is through using fixtures (another feature brought to us by the jasmine-jquery plugin).\r\n\r\nRe-writing the last spec to use fixtures would look as follows:\r\n\r\n\r\n```javascript\r\ndescribe(\"TodoView\", function() {\r\n  \r\n  beforeEach(function() {\r\n    ...\r\n    setFixtures('<ul class=\"todos\"></ul>');\r\n  });\r\n  \r\n  ...\r\n  \r\n  describe(\"Template\", function() {\r\n      \r\n    beforeEach(function() {\r\n      $('.todos').append(this.view.render().el);\r\n    });\r\n      \r\n    it(\"has the correct text content\", function() {\r\n      expect($('.todos').find('.todo-content'))\r\n        .toHaveText('My Todo');\r\n    });\r\n      \r\n  });\r\n  \r\n});\r\n```\r\n\r\nWhat we're now doing in the above spec is appending the rendered todo item into the fixture. We then set expectations against the fixture, which may be something desirable when a view is setup against an element which already exists in the DOM. It would be necessary to provide both the fixture and test the ```el``` property correctly picking up the element expected when the view is instantiated.\r\n\r\n\r\n##Rendering with a templating system\r\n\r\n\r\nJavaScript templating systems (such as Handlebars, Mustache and even Underscore's own Micro-templating) support conditional logic in template strings. What this effectively means is that we can add if/else/ternery expressions inline which can then be evaluated as needed, allowing us to build even more powerful templates. \r\n\r\nIn our case, when a user sets a Todo item to be complete (done), we may wish to provide them with visual feedback (such as a striked line through the text) to differentiate the item from those that are remaining. This can be done by attaching a new class to the item. Let's begin by writing a test we would ideally like to work:\r\n\r\n\r\n```javascript\r\ndescribe(\"When a todo is done\", function() {\r\n  \r\n  beforeEach(function() {\r\n    this.model.set({done: true}, {silent: true});\r\n    $('.todos').append(this.view.render().el);\r\n  });\r\n  \r\n  it(\"has a done class\", function() {\r\n    expect($('.todos .todo-content:first-child'))\r\n      .toHaveClass(\"done\");\r\n  });\r\n  \r\n});\r\n```\r\n\r\nThis will fail with the following message:\r\n\r\nExpected '<label class=\"todo-content\">My Todo</label>' \r\nto have class 'done'.\r\n\r\nwhich can be fixed in the existing render() method as follows:\r\n\r\n\r\n```javascript\r\nrender: function() {\r\n  var template = '<label class=\"todo-content\">' +\r\n    '<%= text %></label>';\r\n  var output = template\r\n    .replace(\"<%= text %>\", this.model.get('text'));\r\n  $(this.el).html(output);\r\n  if (this.model.get('done')) {\r\n    this.$(\".todo-content\").addClass(\"done\");\r\n  }\r\n  return this;\r\n}\r\n```\r\n \r\n\r\nThis can however get unwieldily fairly quickly. As the logic in our templates increases, so does the complexity involved. This is where templates libraries can help. As mentioned earlier, there are a number of popular options available, but for the purposes of this chapter we're going to stick to using Underscore's built-in Microtemplating. Whilst there are more advanced options you're free to explore, the benefit of this is that no additional files are required and we can easily change the existing Jasmine specs without too much adjustment.\r\n\r\nThe TodoView object modified to use Underscore templating would look as follows:\r\n\r\n```javascript\r\nvar TodoView = Backbone.View.extend({\r\n  \r\n  tagName: \"li\",\r\n  \r\n  initialize: function(options) {\r\n    this.template = _.template(options.template || \"\");\r\n  },\r\n  \r\n  render: function() {\r\n    $(this.el).html(this.template(this.model.toJSON()));\r\n    return this;\r\n  },\r\n\r\n  ...\r\n  \r\n});\r\n```\r\n\r\n\r\nAbove, the initialize() method compiles a supplied Underscore template (using the _.template() function) in the instantiation. A more common way of referencing templates is placing them in a script tag using a custom script type (e.g type=\"text/template\"). As this isn't a script type any browser understands, it's simply ignored, however referencing the script by an id attribute allows the template to be kept separate to other parts of the page which wish to use it. In real world applications, it's preferable to either do this or load in templates stored in external files for testing. \r\n\r\nFor testing purposes, we're going to continue using the string injection approach to keep things simple. There is however a useful trick that can be applied to automatically create or extend templates in the Jasmine scope for each test. By creating a new directory (say, 'templates') in the 'spec' folder and adding a new script file with the following contents, to jasmine.yml or SpecRunner.html, we can add a todo property which contains the Underscore template we wish to use:\r\n\r\n```javascript\r\nbeforeEach(function() {\r\n  this.templates = _.extend(this.templates || {}, {\r\n    todo: '<label class=\"todo-content\">' +\r\n            '<%= text %>' +\r\n          '</label>'\r\n  });\r\n});\r\n```\r\n\r\nTo finish this off, we simply update our existing spec to reference the template when instantiating the TodoView object:\r\n\r\n\r\n```javascript\r\ndescribe(\"TodoView\", function() {\r\n\r\n  beforeEach(function() {\r\n    ...\r\n    this.view = new TodoView({\r\n      model: this.model,\r\n      template: this.templates.todo\r\n    });\r\n  });\r\n  \r\n  ...\r\n  \r\n});\r\n```\r\n\r\n\r\nThe existing specs we've looked at would continue to pass using this approach, leaving us free to adjust the template with some additional conditional logic for Todos with a status of 'done':\r\n\r\n```javascript\r\nbeforeEach(function() {\r\n  this.templates = _.extend(this.templates || {}, {\r\n    todo: '<label class=\"todo-content <%= done ? 'done' : '' %>\"' +\r\n            '<%= text %>' +\r\n          '</label>'\r\n  });\r\n});\r\n```\r\n\r\nThis will now also pass without any issues. Remember that jasmine-jquery also supports loading external fixtures into your specs easily using it's build in ```loadFixtures()``` and ```readFixtures()``` methods. For more information, consider reading the official jasmine-jquery [docs](https://github.com/velesin/jasmine-jquery).\r\n\r\n\r\n##Conclusions\r\n\r\nWe have now covered how to write Jasmine tests for models, views and collections with Backbone.js. Whilst testing routing can at times be desirable, some developers feel it can be more optimal to leave this to third-party tools such as Selenium, so do keep this in mind.\r\n\r\nJames Newbery was kind enough to help me with writing the Views section above and his articles on [Testing Backbone Apps With SinonJS](http://tinnedfruit.com/2011/04/26/testing-backbone-apps-with-jasmine-sinon-3.html) were of great inspiration (you'll actually find some Handlebars examples of the view specs in part 3 of his article). If you would like to learn more about writing spies and mocks for Backbone using [SinonJS](http://sinonjs.org) as well as how to test Backbone routers, do consider reading his series.\r\n\r\n##Exercise\r\n\r\nAs an exercise, I recommend now downloading [Backbone Koans](http://github.com/addyosmani/backbone-koans) and trying to fix some of the purposefully failing tests it has to offer. This is an excellent way of not just learning how Jasmine specs and suites work, but working through the examples (without peaking back) will also put your Backbone skills to test too.\r\n\r\n**Note**: I've linked to this book's fork of Koans in case any project-specific changes are required, however, in case you would like to check out the original project on GitHub, please feel [free](https://github.com/larrymyers/backbone-koans) to.\r\n\r\n##Further reading\r\n* [Jasmine + Backbone Revisited](http://japhr.blogspot.com/2011/11/jasmine-backbonejs-revisited.html)\r\n* [Backbone, PhantomJS and Jasmine](http://japhr.blogspot.com/2011/12/phantomjs-and-backbonejs-and-requirejs.html)\r\n\r\n\r\n\r\n#<a name=\"resources\">Resources</a>\r\n\r\nWhilst we get with Backbone out of the box can be terribly useful, there are some equally beneficial add-ons that can help simplify our development process. These include:\r\n\r\n* [Backbone Layout Manager](https://github.com/tbranyen/backbone.layoutmanager)\r\n* [Backbone Model Binding](https://github.com/derickbailey/backbone.modelbinding)\r\n* [Backbone Relational - for model relationships](https://github.com/PaulUithol/Backbone-relational)\r\n* [View and model inheritance](https://gist.github.com/1271041)\r\n* [Backbone CouchDB](https://github.com/janmonschke/backbone-couchdb)\r\n* [Backbone Validations - HTML5 inspired validations](https://github.com/n-time/backbone.validations)\r\n\r\nIn time, there will be tutorials in the book covering some of these resources but until then, please feel free to check them out. \r\n\r\n\r\n"}